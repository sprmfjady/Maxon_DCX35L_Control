
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000134c  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000134c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000167  00800126  00800126  00001406  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001406  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144e  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a84  00000000  00000000  000029ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab1  00000000  00000000  0000344e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00003f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000999  00000000  00000000  00004234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000695  00000000  00000000  00004bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005262  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ae c0       	rjmp	.+348    	; 0x19e <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	8b c0       	rjmp	.+278    	; 0x160 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e4       	ldi	r30, 0x4C	; 76
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 32       	cpi	r26, 0x26	; 38
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 38       	cpi	r26, 0x8D	; 141
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	6f d5       	rcall	.+2782   	; 0xba2 <main>
      c4:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <SetDutyCW>:
volatile double Ki_c = 2211.7;  //원래값 : 2211.7

// 모터에 PWN값 지정해주는 함수
void SetDutyCW(double v){
	
	while(TCNT1 == 0);
      ca:	2c b5       	in	r18, 0x2c	; 44
      cc:	3d b5       	in	r19, 0x2d	; 45
      ce:	23 2b       	or	r18, r19
      d0:	e1 f3       	breq	.-8      	; 0xca <SetDutyCW>

	int ocr = v * (200. / 24.) + 200;
      d2:	25 e5       	ldi	r18, 0x55	; 85
      d4:	35 e5       	ldi	r19, 0x55	; 85
      d6:	45 e0       	ldi	r20, 0x05	; 5
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	0e 94 41 09 	call	0x1282	; 0x1282 <__mulsf3>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	48 e4       	ldi	r20, 0x48	; 72
      e4:	53 e4       	ldi	r21, 0x43	; 67
      e6:	16 d7       	rcall	.+3628   	; 0xf14 <__addsf3>
      e8:	e5 d7       	rcall	.+4042   	; 0x10b4 <__fixsfsi>
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      ea:	67 38       	cpi	r22, 0x87	; 135
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	78 07       	cpc	r23, r24
      f0:	34 f4       	brge	.+12     	; 0xfe <SetDutyCW+0x34>
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;  //OCR : 10~390
      f2:	6a 30       	cpi	r22, 0x0A	; 10
      f4:	71 05       	cpc	r23, r1
      f6:	2c f4       	brge	.+10     	; 0x102 <SetDutyCW+0x38>
      f8:	6a e0       	ldi	r22, 0x0A	; 10
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	02 c0       	rjmp	.+4      	; 0x102 <SetDutyCW+0x38>
	
	while(TCNT1 == 0);

	int ocr = v * (200. / 24.) + 200;
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      fe:	66 e8       	ldi	r22, 0x86	; 134
     100:	71 e0       	ldi	r23, 0x01	; 1
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;  //OCR : 10~390
	//OCR1A = OCR1B = ocr;
	
	OCR1A = OCR3B = ocr + 8;		//1 H
     102:	cb 01       	movw	r24, r22
     104:	08 96       	adiw	r24, 0x08	; 8
     106:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     10a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     10e:	9b bd       	out	0x2b, r25	; 43
     110:	8a bd       	out	0x2a, r24	; 42
	OCR1B = OCR3A = ocr - 8;		//1 L
     112:	68 50       	subi	r22, 0x08	; 8
     114:	71 09       	sbc	r23, r1
     116:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     11a:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     11e:	79 bd       	out	0x29, r23	; 41
     120:	68 bd       	out	0x28, r22	; 40
     122:	08 95       	ret

00000124 <InitLS7366>:
}

void InitLS7366(){
     124:	cf 93       	push	r28
	
	PORTB = 0x00;
     126:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_MDR0 | WR_REG);
     128:	88 e8       	ldi	r24, 0x88	; 136
     12a:	e9 d6       	rcall	.+3538   	; 0xefe <SPI_MasterSend>
	SPI_MasterSend(X4_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX |FILTER_CDF_1);
     12c:	83 e4       	ldi	r24, 0x43	; 67
     12e:	e7 d6       	rcall	.+3534   	; 0xefe <SPI_MasterSend>
	PORTB = 0x01;
     130:	c1 e0       	ldi	r28, 0x01	; 1
     132:	c8 bb       	out	0x18, r28	; 24
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_MDR1 | WR_REG);
     134:	18 ba       	out	0x18, r1	; 24
     136:	80 e9       	ldi	r24, 0x90	; 144
	SPI_MasterSend(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
     138:	e2 d6       	rcall	.+3524   	; 0xefe <SPI_MasterSend>
     13a:	80 e0       	ldi	r24, 0x00	; 0
	PORTB = 0x01;
     13c:	e0 d6       	rcall	.+3520   	; 0xefe <SPI_MasterSend>
	
	PORTB = 0x00;
     13e:	c8 bb       	out	0x18, r28	; 24
	SPI_MasterSend(SELECT_CNTR | CLR_REG);
     140:	18 ba       	out	0x18, r1	; 24
     142:	80 e2       	ldi	r24, 0x20	; 32
     144:	dc d6       	rcall	.+3512   	; 0xefe <SPI_MasterSend>
	PORTB = 0x01;
     146:	c8 bb       	out	0x18, r28	; 24
}
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <getADC>:

//ADC를 받아오는 함수 : 전류센서 값
int getADC(char ch){

	ADMUX = (ADMUX & 0xf0) + ch;
     14c:	97 b1       	in	r25, 0x07	; 7
     14e:	90 7f       	andi	r25, 0xF0	; 240
     150:	89 0f       	add	r24, r25
     152:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40;
     154:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));
     156:	34 9b       	sbis	0x06, 4	; 6
     158:	fe cf       	rjmp	.-4      	; 0x156 <getADC+0xa>
	return ADC;
     15a:	84 b1       	in	r24, 0x04	; 4
     15c:	95 b1       	in	r25, 0x05	; 5
}
     15e:	08 95       	ret

00000160 <__vector_18>:

// USART0번 인터럽트 >> UART0번을 통해 MFC로부터 값이 들어오면 발동
// 여기서부터 ATMega128의 역할 시작
ISR(USART0_RX_vect){
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	0b b6       	in	r0, 0x3b	; 59
     16c:	0f 92       	push	r0
     16e:	8f 93       	push	r24
     170:	ef 93       	push	r30
     172:	ff 93       	push	r31

	g_buf[g_BufWriteCnt++] = UDR0; // 값이 들어오면 값이 들어오는 대로 버퍼에 값들 저장
     174:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <g_BufWriteCnt>
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	8e 0f       	add	r24, r30
     17c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <g_BufWriteCnt>
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	8c b1       	in	r24, 0x0c	; 12
     184:	ea 5c       	subi	r30, 0xCA	; 202
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	80 83       	st	Z, r24
}
     18a:	ff 91       	pop	r31
     18c:	ef 91       	pop	r30
     18e:	8f 91       	pop	r24
     190:	0f 90       	pop	r0
     192:	0b be       	out	0x3b, r0	; 59
     194:	0f 90       	pop	r0
     196:	0f be       	out	0x3f, r0	; 63
     198:	0f 90       	pop	r0
     19a:	1f 90       	pop	r1
     19c:	18 95       	reti

0000019e <__vector_16>:

// 타이머 인터럽트 (제어 주기 설정)
ISR(TIMER0_OVF_vect){
     19e:	1f 92       	push	r1
     1a0:	0f 92       	push	r0
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	0f 92       	push	r0
     1a6:	11 24       	eor	r1, r1
     1a8:	0b b6       	in	r0, 0x3b	; 59
     1aa:	0f 92       	push	r0
     1ac:	4f 92       	push	r4
     1ae:	5f 92       	push	r5
     1b0:	6f 92       	push	r6
     1b2:	7f 92       	push	r7
     1b4:	8f 92       	push	r8
     1b6:	9f 92       	push	r9
     1b8:	af 92       	push	r10
     1ba:	bf 92       	push	r11
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	2f 93       	push	r18
     1c6:	3f 93       	push	r19
     1c8:	4f 93       	push	r20
     1ca:	5f 93       	push	r21
     1cc:	6f 93       	push	r22
     1ce:	7f 93       	push	r23
     1d0:	8f 93       	push	r24
     1d2:	9f 93       	push	r25
     1d4:	af 93       	push	r26
     1d6:	bf 93       	push	r27
     1d8:	cf 93       	push	r28
     1da:	ef 93       	push	r30
     1dc:	ff 93       	push	r31
			
	TCNT0 = 256 - 125;  // 131 -> 제어주기:0.5ms
     1de:	83 e8       	ldi	r24, 0x83	; 131
     1e0:	82 bf       	out	0x32, r24	; 50
	//TCNT3 = 65536 - 125;
	//Read LS7366
	int32_t cnt;
	
	PORTC = 0x01;
     1e2:	c1 e0       	ldi	r28, 0x01	; 1
     1e4:	c5 bb       	out	0x15, r28	; 21
	
	g_ADC = getADC(0); // ADC 0번 값을 읽어 옴 : ADC 0번 (PF0)은 전류센서 연결
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	b1 df       	rcall	.-158    	; 0x14c <getADC>
     1ea:	bc 01       	movw	r22, r24
     1ec:	99 0f       	add	r25, r25
     1ee:	88 0b       	sbc	r24, r24
     1f0:	99 0b       	sbc	r25, r25
     1f2:	93 d7       	rcall	.+3878   	; 0x111a <__floatsisf>
     1f4:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <g_ADC>
     1f8:	70 93 70 02 	sts	0x0270, r23	; 0x800270 <g_ADC+0x1>
     1fc:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <g_ADC+0x2>
     200:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <g_ADC+0x3>
	
	PORTB = 0x00;
     204:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_OTR | LOAD_REG);  // 0010 1000 | 1100 0000 = 1110 1000
     206:	88 ee       	ldi	r24, 0xE8	; 232
     208:	7a d6       	rcall	.+3316   	; 0xefe <SPI_MasterSend>
	PORTB = 0x01;
     20a:	c8 bb       	out	0x18, r28	; 24
			
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | RD_REG);
     20c:	18 ba       	out	0x18, r1	; 24
     20e:	88 e6       	ldi	r24, 0x68	; 104
	cnt = SPI_MasterRecv();		cnt = cnt<< 8;
     210:	76 d6       	rcall	.+3308   	; 0xefe <SPI_MasterSend>
     212:	7a d6       	rcall	.+3316   	; 0xf08 <SPI_MasterRecv>
     214:	c8 2e       	mov	r12, r24
     216:	d1 2c       	mov	r13, r1
     218:	e1 2c       	mov	r14, r1
     21a:	f1 2c       	mov	r15, r1
     21c:	fe 2c       	mov	r15, r14
     21e:	ed 2c       	mov	r14, r13
     220:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     222:	cc 24       	eor	r12, r12
     224:	71 d6       	rcall	.+3298   	; 0xf08 <SPI_MasterRecv>
     226:	c8 2a       	or	r12, r24
     228:	fe 2c       	mov	r15, r14
     22a:	ed 2c       	mov	r14, r13
     22c:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     22e:	cc 24       	eor	r12, r12
     230:	6b d6       	rcall	.+3286   	; 0xf08 <SPI_MasterRecv>
     232:	c8 2a       	or	r12, r24
     234:	fe 2c       	mov	r15, r14
     236:	ed 2c       	mov	r14, r13
     238:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();
     23a:	cc 24       	eor	r12, r12
     23c:	65 d6       	rcall	.+3274   	; 0xf08 <SPI_MasterRecv>
	PORTB = 0x01;
     23e:	c8 bb       	out	0x18, r28	; 24
	g_Cnt = -cnt;
     240:	c8 2a       	or	r12, r24
     242:	f0 94       	com	r15
     244:	e0 94       	com	r14
     246:	d0 94       	com	r13
     248:	c0 94       	com	r12
     24a:	c1 1c       	adc	r12, r1
     24c:	d1 1c       	adc	r13, r1
     24e:	e1 1c       	adc	r14, r1
     250:	f1 1c       	adc	r15, r1
     252:	c0 92 7b 02 	sts	0x027B, r12	; 0x80027b <g_Cnt>
     256:	d0 92 7c 02 	sts	0x027C, r13	; 0x80027c <g_Cnt+0x1>
     25a:	e0 92 7d 02 	sts	0x027D, r14	; 0x80027d <g_Cnt+0x2>
     25e:	f0 92 7e 02 	sts	0x027E, r15	; 0x80027e <g_Cnt+0x3>
	
	PORTC = 0x03;
     262:	83 e0       	ldi	r24, 0x03	; 3
     264:	85 bb       	out	0x15, r24	; 21
	
	g_Pcur = (g_Cnt / (4096. * 81.)) * 2 * M_PI;  // 엔코더로 받은 현재 샤프트 위치 정보
     266:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <g_Cnt>
     26a:	70 91 7c 02 	lds	r23, 0x027C	; 0x80027c <g_Cnt+0x1>
     26e:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <g_Cnt+0x2>
     272:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <g_Cnt+0x3>
     276:	51 d7       	rcall	.+3746   	; 0x111a <__floatsisf>
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	42 ea       	ldi	r20, 0xA2	; 162
     27e:	58 e4       	ldi	r21, 0x48	; 72
     280:	b1 d6       	rcall	.+3426   	; 0xfe4 <__divsf3>
     282:	9b 01       	movw	r18, r22
     284:	ac 01       	movw	r20, r24
     286:	46 d6       	rcall	.+3212   	; 0xf14 <__addsf3>
     288:	2b ed       	ldi	r18, 0xDB	; 219
     28a:	3f e0       	ldi	r19, 0x0F	; 15
     28c:	49 e4       	ldi	r20, 0x49	; 73
     28e:	50 e4       	ldi	r21, 0x40	; 64
     290:	f8 d7       	rcall	.+4080   	; 0x1282 <__mulsf3>
     292:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <g_Pcur>
     296:	70 93 81 02 	sts	0x0281, r23	; 0x800281 <g_Pcur+0x1>
     29a:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <g_Pcur+0x2>
     29e:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <g_Pcur+0x3>
	
	
	//제어 코드(위치, 속도, 전류 제어기)//
	
	// 위치제어기
	if ((g_TimerCnt % 100) == 0) {
     2a2:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <g_TimerCnt>
     2a6:	89 e2       	ldi	r24, 0x29	; 41
     2a8:	98 9f       	mul	r25, r24
     2aa:	81 2d       	mov	r24, r1
     2ac:	11 24       	eor	r1, r1
     2ae:	82 95       	swap	r24
     2b0:	8f 70       	andi	r24, 0x0F	; 15
     2b2:	24 e6       	ldi	r18, 0x64	; 100
     2b4:	82 9f       	mul	r24, r18
     2b6:	90 19       	sub	r25, r0
     2b8:	11 24       	eor	r1, r1
     2ba:	91 11       	cpse	r25, r1
     2bc:	c6 c0       	rjmp	.+396    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				
		if (g_Pdes < 0) {
     2be:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_Pdes>
     2c2:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <g_Pdes+0x1>
     2c6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_Pdes+0x2>
     2ca:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_Pdes+0x3>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	a9 01       	movw	r20, r18
     2d4:	83 d6       	rcall	.+3334   	; 0xfdc <__cmpsf2>
     2d6:	88 23       	and	r24, r24
     2d8:	44 f4       	brge	.+16     	; 0x2ea <__vector_16+0x14c>
			g_Pdes + 2*M_PI; // 음수 값 입력시 해당되는 양수 값으로 출력
     2da:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <g_Pdes>
     2de:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <g_Pdes+0x1>
     2e2:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <g_Pdes+0x2>
     2e6:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <g_Pdes+0x3>
		}
		
		//위치 제어의 결과 값으로 속도 값이 도출됨
		g_Perr = g_Pdes - g_Pcur;  // 목표 위치 - 현재 위치 = position error
     2ea:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_Pdes>
     2ee:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <g_Pdes+0x1>
     2f2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_Pdes+0x2>
     2f6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_Pdes+0x3>
     2fa:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <g_Pcur>
     2fe:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <g_Pcur+0x1>
     302:	40 91 82 02 	lds	r20, 0x0282	; 0x800282 <g_Pcur+0x2>
     306:	50 91 83 02 	lds	r21, 0x0283	; 0x800283 <g_Pcur+0x3>
     30a:	03 d6       	rcall	.+3078   	; 0xf12 <__subsf3>
     30c:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <g_Perr>
     310:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <g_Perr+0x1>
     314:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <g_Perr+0x2>
     318:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <g_Perr+0x3>
		g_Pderr = g_Perr - g_Ppre; // 현재 에러 - 이전 에러 = position error 미분
     31c:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <g_Perr>
     320:	70 91 37 02 	lds	r23, 0x0237	; 0x800237 <g_Perr+0x1>
     324:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <g_Perr+0x2>
     328:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <g_Perr+0x3>
     32c:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <g_Ppre>
     330:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <g_Ppre+0x1>
     334:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <g_Ppre+0x2>
     338:	50 91 69 02 	lds	r21, 0x0269	; 0x800269 <g_Ppre+0x3>
     33c:	ea d5       	rcall	.+3028   	; 0xf12 <__subsf3>
     33e:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <g_Pderr>
     342:	70 93 4e 02 	sts	0x024E, r23	; 0x80024e <g_Pderr+0x1>
     346:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <g_Pderr+0x2>
     34a:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <g_Pderr+0x3>
		g_pos_control = (double) g_Perr * Kp_p +  g_Pderr* Kd_p; // PD 제어기
     34e:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <g_Perr>
     352:	70 91 37 02 	lds	r23, 0x0237	; 0x800237 <g_Perr+0x1>
     356:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <g_Perr+0x2>
     35a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <g_Perr+0x3>
     35e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Kp_p>
     362:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Kp_p+0x1>
     366:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <Kp_p+0x2>
     36a:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <Kp_p+0x3>
     36e:	80 90 4d 02 	lds	r8, 0x024D	; 0x80024d <g_Pderr>
     372:	90 90 4e 02 	lds	r9, 0x024E	; 0x80024e <g_Pderr+0x1>
     376:	a0 90 4f 02 	lds	r10, 0x024F	; 0x80024f <g_Pderr+0x2>
     37a:	b0 90 50 02 	lds	r11, 0x0250	; 0x800250 <g_Pderr+0x3>
     37e:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <Kd_p>
     382:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <Kd_p+0x1>
     386:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <Kd_p+0x2>
     38a:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <Kd_p+0x3>
     38e:	79 d7       	rcall	.+3826   	; 0x1282 <__mulsf3>
     390:	6b 01       	movw	r12, r22
     392:	7c 01       	movw	r14, r24
     394:	a3 01       	movw	r20, r6
     396:	92 01       	movw	r18, r4
     398:	c5 01       	movw	r24, r10
     39a:	b4 01       	movw	r22, r8
     39c:	72 d7       	rcall	.+3812   	; 0x1282 <__mulsf3>
     39e:	9b 01       	movw	r18, r22
     3a0:	ac 01       	movw	r20, r24
     3a2:	c7 01       	movw	r24, r14
     3a4:	b6 01       	movw	r22, r12
     3a6:	b6 d5       	rcall	.+2924   	; 0xf14 <__addsf3>
     3a8:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <g_pos_control>
     3ac:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <g_pos_control+0x1>
     3b0:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <g_pos_control+0x2>
     3b4:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <g_pos_control+0x3>
		
		if (g_pos_control > 642.65/81.) {
     3b8:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <g_pos_control>
     3bc:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <g_pos_control+0x1>
     3c0:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <g_pos_control+0x2>
     3c4:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <g_pos_control+0x3>
     3c8:	2d ee       	ldi	r18, 0xED	; 237
     3ca:	32 ee       	ldi	r19, 0xE2	; 226
     3cc:	4d ef       	ldi	r20, 0xFD	; 253
     3ce:	50 e4       	ldi	r21, 0x40	; 64
     3d0:	54 d7       	rcall	.+3752   	; 0x127a <__gesf2>
     3d2:	18 16       	cp	r1, r24
     3d4:	6c f4       	brge	.+26     	; 0x3f0 <__vector_16+0x252>
			g_pos_control = 642.65/81.;
     3d6:	8d ee       	ldi	r24, 0xED	; 237
     3d8:	92 ee       	ldi	r25, 0xE2	; 226
     3da:	ad ef       	ldi	r26, 0xFD	; 253
     3dc:	b0 e4       	ldi	r27, 0x40	; 64
     3de:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <g_pos_control>
     3e2:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <g_pos_control+0x1>
     3e6:	a0 93 75 02 	sts	0x0275, r26	; 0x800275 <g_pos_control+0x2>
     3ea:	b0 93 76 02 	sts	0x0276, r27	; 0x800276 <g_pos_control+0x3>
		}
		
		else if (g_pos_control < -642.65/81.) {
     3ee:	1b c0       	rjmp	.+54     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     3f0:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <g_pos_control>
     3f4:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <g_pos_control+0x1>
     3f8:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <g_pos_control+0x2>
     3fc:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <g_pos_control+0x3>
     400:	2d ee       	ldi	r18, 0xED	; 237
     402:	32 ee       	ldi	r19, 0xE2	; 226
     404:	4d ef       	ldi	r20, 0xFD	; 253
     406:	50 ec       	ldi	r21, 0xC0	; 192
     408:	e9 d5       	rcall	.+3026   	; 0xfdc <__cmpsf2>
     40a:	88 23       	and	r24, r24
     40c:	64 f4       	brge	.+24     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			g_pos_control = -642.65/81.;
     40e:	8d ee       	ldi	r24, 0xED	; 237
     410:	92 ee       	ldi	r25, 0xE2	; 226
     412:	ad ef       	ldi	r26, 0xFD	; 253
     414:	b0 ec       	ldi	r27, 0xC0	; 192
     416:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <g_pos_control>
     41a:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <g_pos_control+0x1>
     41e:	a0 93 75 02 	sts	0x0275, r26	; 0x800275 <g_pos_control+0x2>
     422:	b0 93 76 02 	sts	0x0276, r27	; 0x800276 <g_pos_control+0x3>
		}
		
		g_Ppre = g_Perr; // 현재 위치 에러 값을 이전 위치 에러 값으로 저장
     426:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <g_Perr>
     42a:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <g_Perr+0x1>
     42e:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <g_Perr+0x2>
     432:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <g_Perr+0x3>
     436:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <g_Ppre>
     43a:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <g_Ppre+0x1>
     43e:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <g_Ppre+0x2>
     442:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <g_Ppre+0x3>
		g_TimerCnt = 0;
     446:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <g_TimerCnt>
	}
		
	// 속도제어기
	if ((g_TimerCnt % 10) == 0) {
     44a:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <g_TimerCnt>
     44e:	8d ec       	ldi	r24, 0xCD	; 205
     450:	28 9f       	mul	r18, r24
     452:	81 2d       	mov	r24, r1
     454:	11 24       	eor	r1, r1
     456:	86 95       	lsr	r24
     458:	86 95       	lsr	r24
     45a:	86 95       	lsr	r24
     45c:	88 0f       	add	r24, r24
     45e:	98 2f       	mov	r25, r24
     460:	99 0f       	add	r25, r25
     462:	99 0f       	add	r25, r25
     464:	89 0f       	add	r24, r25
     466:	28 13       	cpse	r18, r24
		
		// 속도 값 Saturation
		if (g_pos_control > g_Vlimit) {
     468:	e1 c1       	rjmp	.+962    	; 0x82c <__LOCK_REGION_LENGTH__+0x42c>
     46a:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <g_pos_control>
     46e:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <g_pos_control+0x1>
     472:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <g_pos_control+0x2>
     476:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <g_pos_control+0x3>
     47a:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <g_Vlimit>
     47e:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <g_Vlimit+0x1>
     482:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <g_Vlimit+0x2>
     486:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <g_Vlimit+0x3>
     48a:	f7 d6       	rcall	.+3566   	; 0x127a <__gesf2>
     48c:	18 16       	cp	r1, r24
     48e:	8c f4       	brge	.+34     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
			g_pos_control = g_Vlimit;
     490:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <g_Vlimit>
     494:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_Vlimit+0x1>
     498:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <g_Vlimit+0x2>
     49c:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <g_Vlimit+0x3>
     4a0:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <g_pos_control>
     4a4:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <g_pos_control+0x1>
     4a8:	a0 93 75 02 	sts	0x0275, r26	; 0x800275 <g_pos_control+0x2>
     4ac:	b0 93 76 02 	sts	0x0276, r27	; 0x800276 <g_pos_control+0x3>
     4b0:	27 c0       	rjmp	.+78     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		}
		else if (g_pos_control < -g_Vlimit) {
     4b2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <g_Vlimit>
     4b6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_Vlimit+0x1>
     4ba:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <g_Vlimit+0x2>
     4be:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <g_Vlimit+0x3>
     4c2:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <g_pos_control>
     4c6:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <g_pos_control+0x1>
     4ca:	40 91 75 02 	lds	r20, 0x0275	; 0x800275 <g_pos_control+0x2>
     4ce:	50 91 76 02 	lds	r21, 0x0276	; 0x800276 <g_pos_control+0x3>
     4d2:	bc 01       	movw	r22, r24
     4d4:	cd 01       	movw	r24, r26
     4d6:	90 58       	subi	r25, 0x80	; 128
     4d8:	d0 d6       	rcall	.+3488   	; 0x127a <__gesf2>
     4da:	18 16       	cp	r1, r24
     4dc:	8c f4       	brge	.+34     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			g_pos_control = -g_Vlimit;
     4de:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <g_Vlimit>
     4e2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_Vlimit+0x1>
     4e6:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <g_Vlimit+0x2>
     4ea:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <g_Vlimit+0x3>
     4ee:	b0 58       	subi	r27, 0x80	; 128
     4f0:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <g_pos_control>
     4f4:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <g_pos_control+0x1>
     4f8:	a0 93 75 02 	sts	0x0275, r26	; 0x800275 <g_pos_control+0x2>
     4fc:	b0 93 76 02 	sts	0x0276, r27	; 0x800276 <g_pos_control+0x3>
		}
		
		// 속도 제어의 결과 값으로 전류 값이 도출됨
		g_Vcur = (g_Pcur - g_Pvcur) / 0.005;                       // 현재속도
     500:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <g_Pcur>
     504:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <g_Pcur+0x1>
     508:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <g_Pcur+0x2>
     50c:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <g_Pcur+0x3>
     510:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <g_Pvcur>
     514:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <g_Pvcur+0x1>
     518:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <g_Pvcur+0x2>
     51c:	50 91 87 02 	lds	r21, 0x0287	; 0x800287 <g_Pvcur+0x3>
     520:	f8 d4       	rcall	.+2544   	; 0xf12 <__subsf3>
     522:	2a e0       	ldi	r18, 0x0A	; 10
     524:	37 ed       	ldi	r19, 0xD7	; 215
     526:	43 ea       	ldi	r20, 0xA3	; 163
     528:	5b e3       	ldi	r21, 0x3B	; 59
     52a:	5c d5       	rcall	.+2744   	; 0xfe4 <__divsf3>
     52c:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <g_Vcur>
     530:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <g_Vcur+0x1>
     534:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <g_Vcur+0x2>
     538:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <g_Vcur+0x3>
		g_Verr = g_pos_control - g_Vcur;                           // velocity error
     53c:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <g_pos_control>
     540:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <g_pos_control+0x1>
     544:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <g_pos_control+0x2>
     548:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <g_pos_control+0x3>
     54c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <g_Vcur>
     550:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <g_Vcur+0x1>
     554:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <g_Vcur+0x2>
     558:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <g_Vcur+0x3>
     55c:	da d4       	rcall	.+2484   	; 0xf12 <__subsf3>
     55e:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <g_Verr>
     562:	70 93 78 02 	sts	0x0278, r23	; 0x800278 <g_Verr+0x1>
     566:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <g_Verr+0x2>
     56a:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <g_Verr+0x3>
		g_vel_control = g_Verr * Kp_s + g_Verr_sum * Ki_s * 0.005; // PI 제어기
     56e:	80 90 77 02 	lds	r8, 0x0277	; 0x800277 <g_Verr>
     572:	90 90 78 02 	lds	r9, 0x0278	; 0x800278 <g_Verr+0x1>
     576:	a0 90 79 02 	lds	r10, 0x0279	; 0x800279 <g_Verr+0x2>
     57a:	b0 90 7a 02 	lds	r11, 0x027A	; 0x80027a <g_Verr+0x3>
     57e:	40 90 0c 01 	lds	r4, 0x010C	; 0x80010c <Kp_s>
     582:	50 90 0d 01 	lds	r5, 0x010D	; 0x80010d <Kp_s+0x1>
     586:	60 90 0e 01 	lds	r6, 0x010E	; 0x80010e <Kp_s+0x2>
     58a:	70 90 0f 01 	lds	r7, 0x010F	; 0x80010f <Kp_s+0x3>
     58e:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <g_Verr_sum>
     592:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <g_Verr_sum+0x1>
     596:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <g_Verr_sum+0x2>
     59a:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <g_Verr_sum+0x3>
     59e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Ki_s>
     5a2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <Ki_s+0x1>
     5a6:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Ki_s+0x2>
     5aa:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Ki_s+0x3>
     5ae:	69 d6       	rcall	.+3282   	; 0x1282 <__mulsf3>
     5b0:	2a e0       	ldi	r18, 0x0A	; 10
     5b2:	37 ed       	ldi	r19, 0xD7	; 215
     5b4:	43 ea       	ldi	r20, 0xA3	; 163
     5b6:	5b e3       	ldi	r21, 0x3B	; 59
     5b8:	64 d6       	rcall	.+3272   	; 0x1282 <__mulsf3>
     5ba:	6b 01       	movw	r12, r22
     5bc:	7c 01       	movw	r14, r24
     5be:	a3 01       	movw	r20, r6
     5c0:	92 01       	movw	r18, r4
     5c2:	c5 01       	movw	r24, r10
     5c4:	b4 01       	movw	r22, r8
     5c6:	5d d6       	rcall	.+3258   	; 0x1282 <__mulsf3>
     5c8:	9b 01       	movw	r18, r22
     5ca:	ac 01       	movw	r20, r24
     5cc:	c7 01       	movw	r24, r14
     5ce:	b6 01       	movw	r22, r12
     5d0:	a1 d4       	rcall	.+2370   	; 0xf14 <__addsf3>
     5d2:	60 93 6a 02 	sts	0x026A, r22	; 0x80026a <g_vel_control>
     5d6:	70 93 6b 02 	sts	0x026B, r23	; 0x80026b <g_vel_control+0x1>
     5da:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <g_vel_control+0x2>
     5de:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <g_vel_control+0x3>
		g_Verr_sum += g_Verr;                                                          // 속도 값에 대한 에러 값을 계속 누적
     5e2:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <g_Verr>
     5e6:	70 91 78 02 	lds	r23, 0x0278	; 0x800278 <g_Verr+0x1>
     5ea:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <g_Verr+0x2>
     5ee:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <g_Verr+0x3>
     5f2:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <g_Verr_sum>
     5f6:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <g_Verr_sum+0x1>
     5fa:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <g_Verr_sum+0x2>
     5fe:	50 91 4b 02 	lds	r21, 0x024B	; 0x80024b <g_Verr_sum+0x3>
     602:	88 d4       	rcall	.+2320   	; 0xf14 <__addsf3>
     604:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <g_Verr_sum>
     608:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <g_Verr_sum+0x1>
     60c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <g_Verr_sum+0x2>
     610:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <g_Verr_sum+0x3>
		
		// 속도 error sum saturation
		if (g_Verr_sum > 30.) {
     614:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <g_Verr_sum>
     618:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <g_Verr_sum+0x1>
     61c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <g_Verr_sum+0x2>
     620:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <g_Verr_sum+0x3>
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	40 ef       	ldi	r20, 0xF0	; 240
     62a:	51 e4       	ldi	r21, 0x41	; 65
     62c:	26 d6       	rcall	.+3148   	; 0x127a <__gesf2>
     62e:	18 16       	cp	r1, r24
			g_Verr_sum = 30.;
     630:	6c f4       	brge	.+26     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	a0 ef       	ldi	r26, 0xF0	; 240
     638:	b1 e4       	ldi	r27, 0x41	; 65
     63a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_Verr_sum>
     63e:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <g_Verr_sum+0x1>
     642:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <g_Verr_sum+0x2>
     646:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <g_Verr_sum+0x3>
		}
		
		else if (g_Verr_sum < -30.) {
     64a:	1b c0       	rjmp	.+54     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     64c:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <g_Verr_sum>
     650:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <g_Verr_sum+0x1>
     654:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <g_Verr_sum+0x2>
     658:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <g_Verr_sum+0x3>
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	40 ef       	ldi	r20, 0xF0	; 240
     662:	51 ec       	ldi	r21, 0xC1	; 193
     664:	bb d4       	rcall	.+2422   	; 0xfdc <__cmpsf2>
     666:	88 23       	and	r24, r24
			g_Verr_sum= -30.;
     668:	64 f4       	brge	.+24     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	a0 ef       	ldi	r26, 0xF0	; 240
     670:	b1 ec       	ldi	r27, 0xC1	; 193
     672:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_Verr_sum>
     676:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <g_Verr_sum+0x1>
     67a:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <g_Verr_sum+0x2>
     67e:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <g_Verr_sum+0x3>
		}
		
		// 최대 허용 전류 값에 대한 saturation & anti-windup
		if (g_vel_control > g_Climit) {
     682:	60 91 6a 02 	lds	r22, 0x026A	; 0x80026a <g_vel_control>
     686:	70 91 6b 02 	lds	r23, 0x026B	; 0x80026b <g_vel_control+0x1>
     68a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <g_vel_control+0x2>
     68e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <g_vel_control+0x3>
     692:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_Climit>
     696:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_Climit+0x1>
     69a:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <g_Climit+0x2>
     69e:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <g_Climit+0x3>
     6a2:	eb d5       	rcall	.+3030   	; 0x127a <__gesf2>
     6a4:	18 16       	cp	r1, r24
     6a6:	0c f0       	brlt	.+2      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
     6a8:	4d c0       	rjmp	.+154    	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
			g_Verr_sum -= (g_vel_control - g_Climit) * (1. / Kp_s); // anti windup gain : 1/Kps
     6aa:	60 91 6a 02 	lds	r22, 0x026A	; 0x80026a <g_vel_control>
     6ae:	70 91 6b 02 	lds	r23, 0x026B	; 0x80026b <g_vel_control+0x1>
     6b2:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <g_vel_control+0x2>
     6b6:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <g_vel_control+0x3>
     6ba:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_Climit>
     6be:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_Climit+0x1>
     6c2:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <g_Climit+0x2>
     6c6:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <g_Climit+0x3>
     6ca:	40 90 0c 01 	lds	r4, 0x010C	; 0x80010c <Kp_s>
     6ce:	50 90 0d 01 	lds	r5, 0x010D	; 0x80010d <Kp_s+0x1>
     6d2:	60 90 0e 01 	lds	r6, 0x010E	; 0x80010e <Kp_s+0x2>
     6d6:	70 90 0f 01 	lds	r7, 0x010F	; 0x80010f <Kp_s+0x3>
     6da:	c0 90 48 02 	lds	r12, 0x0248	; 0x800248 <g_Verr_sum>
     6de:	d0 90 49 02 	lds	r13, 0x0249	; 0x800249 <g_Verr_sum+0x1>
     6e2:	e0 90 4a 02 	lds	r14, 0x024A	; 0x80024a <g_Verr_sum+0x2>
     6e6:	f0 90 4b 02 	lds	r15, 0x024B	; 0x80024b <g_Verr_sum+0x3>
     6ea:	13 d4       	rcall	.+2086   	; 0xf12 <__subsf3>
     6ec:	4b 01       	movw	r8, r22
     6ee:	5c 01       	movw	r10, r24
     6f0:	a3 01       	movw	r20, r6
     6f2:	92 01       	movw	r18, r4
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 e8       	ldi	r24, 0x80	; 128
     6fa:	9f e3       	ldi	r25, 0x3F	; 63
     6fc:	73 d4       	rcall	.+2278   	; 0xfe4 <__divsf3>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	c5 01       	movw	r24, r10
     704:	b4 01       	movw	r22, r8
     706:	bd d5       	rcall	.+2938   	; 0x1282 <__mulsf3>
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	00 d4       	rcall	.+2048   	; 0xf12 <__subsf3>
     712:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <g_Verr_sum>
     716:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <g_Verr_sum+0x1>
     71a:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <g_Verr_sum+0x2>
     71e:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <g_Verr_sum+0x3>
			g_vel_control = g_Climit;
     722:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
     726:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     72a:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     72e:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     732:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <g_vel_control>
     736:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <g_vel_control+0x1>
     73a:	a0 93 6c 02 	sts	0x026C, r26	; 0x80026c <g_vel_control+0x2>
     73e:	b0 93 6d 02 	sts	0x026D, r27	; 0x80026d <g_vel_control+0x3>
		}
		
		else if (g_vel_control < -g_Climit) {
     742:	64 c0       	rjmp	.+200    	; 0x80c <__LOCK_REGION_LENGTH__+0x40c>
     744:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
     748:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     74c:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     750:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     754:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <g_vel_control>
     758:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <g_vel_control+0x1>
     75c:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <g_vel_control+0x2>
     760:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <g_vel_control+0x3>
     764:	bc 01       	movw	r22, r24
     766:	cd 01       	movw	r24, r26
     768:	90 58       	subi	r25, 0x80	; 128
     76a:	87 d5       	rcall	.+2830   	; 0x127a <__gesf2>
     76c:	18 16       	cp	r1, r24
     76e:	0c f0       	brlt	.+2      	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
			g_Verr_sum -= (g_vel_control + g_Climit) * (1. / Kp_s); // anti windup gain : 1/Kps
     770:	4d c0       	rjmp	.+154    	; 0x80c <__LOCK_REGION_LENGTH__+0x40c>
     772:	60 91 6a 02 	lds	r22, 0x026A	; 0x80026a <g_vel_control>
     776:	70 91 6b 02 	lds	r23, 0x026B	; 0x80026b <g_vel_control+0x1>
     77a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <g_vel_control+0x2>
     77e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <g_vel_control+0x3>
     782:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_Climit>
     786:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_Climit+0x1>
     78a:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <g_Climit+0x2>
     78e:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <g_Climit+0x3>
     792:	40 90 0c 01 	lds	r4, 0x010C	; 0x80010c <Kp_s>
     796:	50 90 0d 01 	lds	r5, 0x010D	; 0x80010d <Kp_s+0x1>
     79a:	60 90 0e 01 	lds	r6, 0x010E	; 0x80010e <Kp_s+0x2>
     79e:	70 90 0f 01 	lds	r7, 0x010F	; 0x80010f <Kp_s+0x3>
     7a2:	c0 90 48 02 	lds	r12, 0x0248	; 0x800248 <g_Verr_sum>
     7a6:	d0 90 49 02 	lds	r13, 0x0249	; 0x800249 <g_Verr_sum+0x1>
     7aa:	e0 90 4a 02 	lds	r14, 0x024A	; 0x80024a <g_Verr_sum+0x2>
     7ae:	f0 90 4b 02 	lds	r15, 0x024B	; 0x80024b <g_Verr_sum+0x3>
     7b2:	b0 d3       	rcall	.+1888   	; 0xf14 <__addsf3>
     7b4:	4b 01       	movw	r8, r22
     7b6:	5c 01       	movw	r10, r24
     7b8:	a3 01       	movw	r20, r6
     7ba:	92 01       	movw	r18, r4
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	80 e8       	ldi	r24, 0x80	; 128
     7c2:	9f e3       	ldi	r25, 0x3F	; 63
     7c4:	0f d4       	rcall	.+2078   	; 0xfe4 <__divsf3>
     7c6:	9b 01       	movw	r18, r22
     7c8:	ac 01       	movw	r20, r24
     7ca:	c5 01       	movw	r24, r10
     7cc:	b4 01       	movw	r22, r8
     7ce:	59 d5       	rcall	.+2738   	; 0x1282 <__mulsf3>
     7d0:	9b 01       	movw	r18, r22
     7d2:	ac 01       	movw	r20, r24
     7d4:	c7 01       	movw	r24, r14
     7d6:	b6 01       	movw	r22, r12
     7d8:	9c d3       	rcall	.+1848   	; 0xf12 <__subsf3>
     7da:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <g_Verr_sum>
     7de:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <g_Verr_sum+0x1>
     7e2:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <g_Verr_sum+0x2>
     7e6:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <g_Verr_sum+0x3>
			g_vel_control = -g_Climit;
     7ea:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
     7ee:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     7f2:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     7f6:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     7fa:	b0 58       	subi	r27, 0x80	; 128
     7fc:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <g_vel_control>
     800:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <g_vel_control+0x1>
     804:	a0 93 6c 02 	sts	0x026C, r26	; 0x80026c <g_vel_control+0x2>
     808:	b0 93 6d 02 	sts	0x026D, r27	; 0x80026d <g_vel_control+0x3>
		}
		
		g_Pvcur = g_Pcur; // 현재 엔코더 값을 이전 엔코더 값으로 저장
     80c:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <g_Pcur>
     810:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <g_Pcur+0x1>
     814:	a0 91 82 02 	lds	r26, 0x0282	; 0x800282 <g_Pcur+0x2>
     818:	b0 91 83 02 	lds	r27, 0x0283	; 0x800283 <g_Pcur+0x3>
     81c:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <g_Pvcur>
     820:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <g_Pvcur+0x1>
     824:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <g_Pvcur+0x2>
     828:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <g_Pvcur+0x3>
	}
	
	g_Cdes = g_vel_control; // 속도 제어 값을 목표 전류 값으로 다시 저장
     82c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <g_vel_control>
     830:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <g_vel_control+0x1>
     834:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <g_vel_control+0x2>
     838:	b0 91 6d 02 	lds	r27, 0x026D	; 0x80026d <g_vel_control+0x3>
     83c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <g_Cdes>
     840:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <g_Cdes+0x1>
     844:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <g_Cdes+0x2>
     848:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <g_Cdes+0x3>

	// 전류 값 Saturation
	if (g_Cdes > g_Climit) {
     84c:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <g_Cdes>
     850:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <g_Cdes+0x1>
     854:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <g_Cdes+0x2>
     858:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_Cdes+0x3>
     85c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_Climit>
     860:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_Climit+0x1>
     864:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <g_Climit+0x2>
     868:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <g_Climit+0x3>
     86c:	06 d5       	rcall	.+2572   	; 0x127a <__gesf2>
     86e:	18 16       	cp	r1, r24
		g_Cdes = g_Climit;
     870:	8c f4       	brge	.+34     	; 0x894 <__LOCK_REGION_LENGTH__+0x494>
     872:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
     876:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     87a:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     87e:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     882:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <g_Cdes>
     886:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <g_Cdes+0x1>
     88a:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <g_Cdes+0x2>
     88e:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <g_Cdes+0x3>
	}
	else if (g_Cdes < -g_Climit) {
     892:	27 c0       	rjmp	.+78     	; 0x8e2 <__LOCK_REGION_LENGTH__+0x4e2>
     894:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
     898:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     89c:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     8a0:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     8a4:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <g_Cdes>
     8a8:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <g_Cdes+0x1>
     8ac:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <g_Cdes+0x2>
     8b0:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <g_Cdes+0x3>
     8b4:	bc 01       	movw	r22, r24
     8b6:	cd 01       	movw	r24, r26
     8b8:	90 58       	subi	r25, 0x80	; 128
		g_Cdes = -g_Climit;
     8ba:	df d4       	rcall	.+2494   	; 0x127a <__gesf2>
     8bc:	18 16       	cp	r1, r24
     8be:	8c f4       	brge	.+34     	; 0x8e2 <__LOCK_REGION_LENGTH__+0x4e2>
     8c0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
     8c4:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     8c8:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     8cc:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     8d0:	b0 58       	subi	r27, 0x80	; 128
     8d2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <g_Cdes>
     8d6:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <g_Cdes+0x1>
	}
		
	g_Ccur = -( ((g_ADC / 1024. * 5.) - 2.5) * 10.);           // 전류 센서를 통해 받은 전류 값(ADC)을 통해 현재 전류 값 계산
     8da:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <g_Cdes+0x2>
     8de:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <g_Cdes+0x3>
     8e2:	60 91 6f 02 	lds	r22, 0x026F	; 0x80026f <g_ADC>
     8e6:	70 91 70 02 	lds	r23, 0x0270	; 0x800270 <g_ADC+0x1>
     8ea:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <g_ADC+0x2>
     8ee:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <g_ADC+0x3>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e8       	ldi	r20, 0x80	; 128
     8f8:	5a e3       	ldi	r21, 0x3A	; 58
     8fa:	c3 d4       	rcall	.+2438   	; 0x1282 <__mulsf3>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 ea       	ldi	r20, 0xA0	; 160
     902:	50 e4       	ldi	r21, 0x40	; 64
     904:	be d4       	rcall	.+2428   	; 0x1282 <__mulsf3>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e2       	ldi	r20, 0x20	; 32
     90c:	50 e4       	ldi	r21, 0x40	; 64
     90e:	01 d3       	rcall	.+1538   	; 0xf12 <__subsf3>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e2       	ldi	r20, 0x20	; 32
     916:	51 e4       	ldi	r21, 0x41	; 65
     918:	b4 d4       	rcall	.+2408   	; 0x1282 <__mulsf3>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	b0 58       	subi	r27, 0x80	; 128
     920:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <g_Ccur>
     924:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <g_Ccur+0x1>
     928:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <g_Ccur+0x2>
     92c:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <g_Ccur+0x3>
	g_Cerr = g_Cdes - g_Ccur;				                   // (목표 전류 - 현재 전류) = current error
     930:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <g_Cdes>
     934:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <g_Cdes+0x1>
     938:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <g_Cdes+0x2>
     93c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_Cdes+0x3>
     940:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <g_Ccur>
     944:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <g_Ccur+0x1>
     948:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <g_Ccur+0x2>
     94c:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <g_Ccur+0x3>
     950:	e0 d2       	rcall	.+1472   	; 0xf12 <__subsf3>
     952:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <g_Cerr>
     956:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <g_Cerr+0x1>
     95a:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <g_Cerr+0x2>
	cur_control = g_Cerr * Kp_c + g_Cerr_sum * Ki_c * 0.0005;  // PI 제어기:  200hz이므로 0.0005초에 한번 이므로 적분부에 0.005를 곱해줌
     95e:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <g_Cerr+0x3>
     962:	80 90 3a 02 	lds	r8, 0x023A	; 0x80023a <g_Cerr>
     966:	90 90 3b 02 	lds	r9, 0x023B	; 0x80023b <g_Cerr+0x1>
     96a:	a0 90 3c 02 	lds	r10, 0x023C	; 0x80023c <g_Cerr+0x2>
     96e:	b0 90 3d 02 	lds	r11, 0x023D	; 0x80023d <g_Cerr+0x3>
     972:	40 90 04 01 	lds	r4, 0x0104	; 0x800104 <Kp_c>
     976:	50 90 05 01 	lds	r5, 0x0105	; 0x800105 <Kp_c+0x1>
     97a:	60 90 06 01 	lds	r6, 0x0106	; 0x800106 <Kp_c+0x2>
     97e:	70 90 07 01 	lds	r7, 0x0107	; 0x800107 <Kp_c+0x3>
     982:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <g_Cerr_sum>
     986:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <g_Cerr_sum+0x1>
     98a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <g_Cerr_sum+0x2>
     98e:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <g_Cerr_sum+0x3>
     992:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     996:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     99a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     99e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     9a2:	6f d4       	rcall	.+2270   	; 0x1282 <__mulsf3>
     9a4:	2f e6       	ldi	r18, 0x6F	; 111
     9a6:	32 e1       	ldi	r19, 0x12	; 18
     9a8:	43 e0       	ldi	r20, 0x03	; 3
     9aa:	5a e3       	ldi	r21, 0x3A	; 58
     9ac:	6a d4       	rcall	.+2260   	; 0x1282 <__mulsf3>
     9ae:	6b 01       	movw	r12, r22
     9b0:	7c 01       	movw	r14, r24
     9b2:	a3 01       	movw	r20, r6
     9b4:	92 01       	movw	r18, r4
     9b6:	c5 01       	movw	r24, r10
     9b8:	b4 01       	movw	r22, r8
     9ba:	63 d4       	rcall	.+2246   	; 0x1282 <__mulsf3>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	c7 01       	movw	r24, r14
     9c2:	b6 01       	movw	r22, r12
     9c4:	a7 d2       	rcall	.+1358   	; 0xf14 <__addsf3>
     9c6:	76 d3       	rcall	.+1772   	; 0x10b4 <__fixsfsi>
	cur_control += g_Vcur * 0.0683;				               // 역기전력 보상
     9c8:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <__data_end+0x1>
     9cc:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <__data_end>
     9d0:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <g_Vcur>
     9d4:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <g_Vcur+0x1>
     9d8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_Vcur+0x2>
     9dc:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <g_Vcur+0x3>
     9e0:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <__data_end>
     9e4:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <__data_end+0x1>
     9e8:	2f ed       	ldi	r18, 0xDF	; 223
     9ea:	30 ee       	ldi	r19, 0xE0	; 224
     9ec:	4b e8       	ldi	r20, 0x8B	; 139
     9ee:	5d e3       	ldi	r21, 0x3D	; 61
     9f0:	48 d4       	rcall	.+2192   	; 0x1282 <__mulsf3>
     9f2:	4b 01       	movw	r8, r22
     9f4:	5c 01       	movw	r10, r24
     9f6:	b7 01       	movw	r22, r14
     9f8:	ff 0c       	add	r15, r15
     9fa:	88 0b       	sbc	r24, r24
     9fc:	99 0b       	sbc	r25, r25
     9fe:	8d d3       	rcall	.+1818   	; 0x111a <__floatsisf>
     a00:	9b 01       	movw	r18, r22
     a02:	ac 01       	movw	r20, r24
     a04:	c5 01       	movw	r24, r10
     a06:	b4 01       	movw	r22, r8
     a08:	85 d2       	rcall	.+1290   	; 0xf14 <__addsf3>
     a0a:	54 d3       	rcall	.+1704   	; 0x10b4 <__fixsfsi>
     a0c:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <__data_end+0x1>
     a10:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <__data_end>
	g_Cerr_sum += g_Cerr;		                               // current error sum(I-term)
     a14:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <g_Cerr>
     a18:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <g_Cerr+0x1>
     a1c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <g_Cerr+0x2>
     a20:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <g_Cerr+0x3>
     a24:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <g_Cerr_sum>
     a28:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <g_Cerr_sum+0x1>
     a2c:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <g_Cerr_sum+0x2>
     a30:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <g_Cerr_sum+0x3>
     a34:	6f d2       	rcall	.+1246   	; 0xf14 <__addsf3>
     a36:	60 93 88 02 	sts	0x0288, r22	; 0x800288 <g_Cerr_sum>
     a3a:	70 93 89 02 	sts	0x0289, r23	; 0x800289 <g_Cerr_sum+0x1>
     a3e:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <g_Cerr_sum+0x2>
	
	//Anti-Windup
	if (cur_control >= 24) {						    // 최대 출력 24V
     a42:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <g_Cerr_sum+0x3>
     a46:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     a4a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
		g_Cerr_sum -= (cur_control - 24.) * 1. /  Kp_c;	// Anti-Windup 계수 1/3kp
     a4e:	48 97       	sbiw	r24, 0x18	; 24
     a50:	ac f1       	brlt	.+106    	; 0xabc <__LOCK_REGION_LENGTH__+0x6bc>
     a52:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
     a56:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
     a5a:	80 90 04 01 	lds	r8, 0x0104	; 0x800104 <Kp_c>
     a5e:	90 90 05 01 	lds	r9, 0x0105	; 0x800105 <Kp_c+0x1>
     a62:	a0 90 06 01 	lds	r10, 0x0106	; 0x800106 <Kp_c+0x2>
     a66:	b0 90 07 01 	lds	r11, 0x0107	; 0x800107 <Kp_c+0x3>
     a6a:	c0 90 88 02 	lds	r12, 0x0288	; 0x800288 <g_Cerr_sum>
     a6e:	d0 90 89 02 	lds	r13, 0x0289	; 0x800289 <g_Cerr_sum+0x1>
     a72:	e0 90 8a 02 	lds	r14, 0x028A	; 0x80028a <g_Cerr_sum+0x2>
     a76:	f0 90 8b 02 	lds	r15, 0x028B	; 0x80028b <g_Cerr_sum+0x3>
     a7a:	07 2e       	mov	r0, r23
     a7c:	00 0c       	add	r0, r0
     a7e:	88 0b       	sbc	r24, r24
     a80:	99 0b       	sbc	r25, r25
     a82:	4b d3       	rcall	.+1686   	; 0x111a <__floatsisf>
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 ec       	ldi	r20, 0xC0	; 192
     a8a:	51 e4       	ldi	r21, 0x41	; 65
     a8c:	42 d2       	rcall	.+1156   	; 0xf12 <__subsf3>
     a8e:	a5 01       	movw	r20, r10
     a90:	94 01       	movw	r18, r8
     a92:	a8 d2       	rcall	.+1360   	; 0xfe4 <__divsf3>
     a94:	9b 01       	movw	r18, r22
     a96:	ac 01       	movw	r20, r24
     a98:	c7 01       	movw	r24, r14
     a9a:	b6 01       	movw	r22, r12
     a9c:	3a d2       	rcall	.+1140   	; 0xf12 <__subsf3>
     a9e:	60 93 88 02 	sts	0x0288, r22	; 0x800288 <g_Cerr_sum>
     aa2:	70 93 89 02 	sts	0x0289, r23	; 0x800289 <g_Cerr_sum+0x1>
     aa6:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <g_Cerr_sum+0x2>
		cur_control = 24;
     aaa:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <g_Cerr_sum+0x3>
     aae:	88 e1       	ldi	r24, 0x18	; 24
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
	}
	else if (cur_control < -24) {
     ab6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
     aba:	3b c0       	rjmp	.+118    	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
     abc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     ac0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
		g_Cerr_sum -= (cur_control + 24.) * 1. / Kp_c;	// Anti-Windup 계수 1/3kp
     ac4:	88 3e       	cpi	r24, 0xE8	; 232
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	a4 f5       	brge	.+104    	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
     aca:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
     ace:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
     ad2:	80 90 04 01 	lds	r8, 0x0104	; 0x800104 <Kp_c>
     ad6:	90 90 05 01 	lds	r9, 0x0105	; 0x800105 <Kp_c+0x1>
     ada:	a0 90 06 01 	lds	r10, 0x0106	; 0x800106 <Kp_c+0x2>
     ade:	b0 90 07 01 	lds	r11, 0x0107	; 0x800107 <Kp_c+0x3>
     ae2:	c0 90 88 02 	lds	r12, 0x0288	; 0x800288 <g_Cerr_sum>
     ae6:	d0 90 89 02 	lds	r13, 0x0289	; 0x800289 <g_Cerr_sum+0x1>
     aea:	e0 90 8a 02 	lds	r14, 0x028A	; 0x80028a <g_Cerr_sum+0x2>
     aee:	f0 90 8b 02 	lds	r15, 0x028B	; 0x80028b <g_Cerr_sum+0x3>
     af2:	07 2e       	mov	r0, r23
     af4:	00 0c       	add	r0, r0
     af6:	88 0b       	sbc	r24, r24
     af8:	99 0b       	sbc	r25, r25
     afa:	0f d3       	rcall	.+1566   	; 0x111a <__floatsisf>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 ec       	ldi	r20, 0xC0	; 192
     b02:	51 e4       	ldi	r21, 0x41	; 65
     b04:	07 d2       	rcall	.+1038   	; 0xf14 <__addsf3>
     b06:	a5 01       	movw	r20, r10
     b08:	94 01       	movw	r18, r8
     b0a:	6c d2       	rcall	.+1240   	; 0xfe4 <__divsf3>
     b0c:	9b 01       	movw	r18, r22
     b0e:	ac 01       	movw	r20, r24
     b10:	c7 01       	movw	r24, r14
     b12:	b6 01       	movw	r22, r12
     b14:	fe d1       	rcall	.+1020   	; 0xf12 <__subsf3>
     b16:	60 93 88 02 	sts	0x0288, r22	; 0x800288 <g_Cerr_sum>
     b1a:	70 93 89 02 	sts	0x0289, r23	; 0x800289 <g_Cerr_sum+0x1>
     b1e:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <g_Cerr_sum+0x2>
     b22:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <g_Cerr_sum+0x3>
		cur_control = -24;
     b26:	88 ee       	ldi	r24, 0xE8	; 232
     b28:	9f ef       	ldi	r25, 0xFF	; 255
     b2a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
     b2e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
	}
	
	SetDutyCW(cur_control);  //목표 전압 전송
     b32:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
     b36:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
     b3a:	07 2e       	mov	r0, r23
     b3c:	00 0c       	add	r0, r0
     b3e:	88 0b       	sbc	r24, r24
     b40:	99 0b       	sbc	r25, r25
     b42:	eb d2       	rcall	.+1494   	; 0x111a <__floatsisf>
     b44:	c2 da       	rcall	.-2684   	; 0xca <SetDutyCW>
     b46:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <g_TimerCnt>

	/////////////////////////////////////////
	g_TimerCnt++;
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <g_TimerCnt>
     b50:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_SendFlag>
	g_SendFlag++;
     b54:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_SendFlag+0x1>
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_SendFlag+0x1>
     b5e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_SendFlag>
     b62:	ff 91       	pop	r31
}
     b64:	ef 91       	pop	r30
     b66:	cf 91       	pop	r28
     b68:	bf 91       	pop	r27
     b6a:	af 91       	pop	r26
     b6c:	9f 91       	pop	r25
     b6e:	8f 91       	pop	r24
     b70:	7f 91       	pop	r23
     b72:	6f 91       	pop	r22
     b74:	5f 91       	pop	r21
     b76:	4f 91       	pop	r20
     b78:	3f 91       	pop	r19
     b7a:	2f 91       	pop	r18
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	cf 90       	pop	r12
     b84:	bf 90       	pop	r11
     b86:	af 90       	pop	r10
     b88:	9f 90       	pop	r9
     b8a:	8f 90       	pop	r8
     b8c:	7f 90       	pop	r7
     b8e:	6f 90       	pop	r6
     b90:	5f 90       	pop	r5
     b92:	4f 90       	pop	r4
     b94:	0f 90       	pop	r0
     b96:	0b be       	out	0x3b, r0	; 59
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <main>:
     ba2:	cf 93       	push	r28




int main(void){
     ba4:	df 93       	push	r29
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	64 97       	sbiw	r28, 0x14	; 20
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
	
	Packet_t packet;
	packet.data.header[0] = packet.data.header[1] = packet.data.header[2] = packet.data.header[3] = 0xFE; // 패킷을 보낼 때 맨 앞 header 데이터 설정
     bb6:	8e ef       	ldi	r24, 0xFE	; 254
     bb8:	8c 83       	std	Y+4, r24	; 0x04
     bba:	8b 83       	std	Y+3, r24	; 0x03
     bbc:	8a 83       	std	Y+2, r24	; 0x02
     bbe:	89 83       	std	Y+1, r24	; 0x01
	
	InitIO();
     bc0:	45 d1       	rcall	.+650    	; 0xe4c <InitIO>
	
	//Uart
	InitUart0(); // atmega128에서 MFC로 serial 통신을 위한 USART 레지스터 설정 함수
     bc2:	8b d1       	rcall	.+790    	; 0xeda <InitUart0>
	
	//SPI
	InitSPI();
     bc4:	93 d1       	rcall	.+806    	; 0xeec <InitSPI>
	
	//Timer
	InitTimer0();
     bc6:	4f d1       	rcall	.+670    	; 0xe66 <InitTimer0>
     bc8:	53 d1       	rcall	.+678    	; 0xe70 <InitTimer1>
	InitTimer1();
     bca:	65 d1       	rcall	.+714    	; 0xe96 <InitTimer3>
     bcc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	InitTimer3();
     bd0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


	TCNT1 = TCNT3 = 0;
     bd4:	1d bc       	out	0x2d, r1	; 45
     bd6:	1c bc       	out	0x2c, r1	; 44
     bd8:	60 e0       	ldi	r22, 0x00	; 0
	SetDutyCW(0.);
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	cb 01       	movw	r24, r22
     bde:	75 da       	rcall	.-2838   	; 0xca <SetDutyCW>
     be0:	77 d1       	rcall	.+750    	; 0xed0 <InitADC>
     be2:	a0 da       	rcall	.-2752   	; 0x124 <InitLS7366>
	
	//ADC
	InitADC();
     be4:	83 e8       	ldi	r24, 0x83	; 131
     be6:	82 bf       	out	0x32, r24	; 50
	
	//LS7366
	InitLS7366();
     be8:	78 94       	sei
     bea:	b1 2c       	mov	r11, r1
	
	TCNT0 = 256 - 125;
     bec:	0f 2e       	mov	r0, r31
     bee:	f4 e1       	ldi	r31, 0x14	; 20
	//TCNT3 = 65536 - 125;
	sei();
     bf0:	9f 2e       	mov	r9, r31

	unsigned char check = 0;
     bf2:	f0 2d       	mov	r31, r0
		
		if(g_SendFlag > 19){
			g_SendFlag = 0;
				
			packet.data.id = g_ID;
			packet.data.size = sizeof(Packet_data_t);
     bf4:	0f 2e       	mov	r0, r31
     bf6:	f3 e0       	ldi	r31, 0x03	; 3
     bf8:	af 2e       	mov	r10, r31
     bfa:	f0 2d       	mov	r31, r0
			packet.data.mode = 3;
     bfc:	7e 01       	movw	r14, r28
     bfe:	85 e1       	ldi	r24, 0x15	; 21
     c00:	e8 0e       	add	r14, r24
     c02:	f1 1c       	adc	r15, r1
     c04:	0f 2e       	mov	r0, r31
     c06:	f2 e5       	ldi	r31, 0x52	; 82
     c08:	cf 2e       	mov	r12, r31
     c0a:	f2 e0       	ldi	r31, 0x02	; 2
			case 1:

				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
				
				if (checkSize == 8) {
					if(g_PacketBuffer.data.id == g_ID){
     c0c:	df 2e       	mov	r13, r31
     c0e:	f0 2d       	mov	r31, r0
     c10:	68 94       	set
     c12:	77 24       	eor	r7, r7
     c14:	71 f8       	bld	r7, 1
     c16:	88 24       	eor	r8, r8

						g_PacketMode = 2;
     c18:	83 94       	inc	r8
     c1a:	b8 c0       	rjmp	.+368    	; 0xd8c <main+0x1ea>
     c1c:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <g_PacketMode>
			case 0:
				
				if (g_buf[g_BufReadCnt] == 0xFF) {
					checkSize++;
					if (checkSize == 4) {
						g_PacketMode = 1;
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	e1 f0       	breq	.+56     	; 0xc5c <main+0xba>
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
			// 반복문 선언: 버퍼로 받은 패킷 데이터 다 읽을때 까지 for문 반복
			// SendShortUART1(g_PacketMode); TransUart1(32); TransUart1(13);
			// Packet 모드에 따라 switch문 발동
			
			switch(g_PacketMode){
     c24:	18 f0       	brcs	.+6      	; 0xc2c <main+0x8a>
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	e1 f1       	breq	.+120    	; 0xca2 <main+0x100>
     c2a:	ab c0       	rjmp	.+342    	; 0xd82 <main+0x1e0>
     c2c:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <g_BufReadCnt>
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	ea 5c       	subi	r30, 0xCA	; 202
				
			case 0:
				
				if (g_buf[g_BufReadCnt] == 0xFF) {
     c34:	fe 4f       	sbci	r31, 0xFE	; 254
     c36:	80 81       	ld	r24, Z
     c38:	8f 3f       	cpi	r24, 0xFF	; 255
     c3a:	69 f4       	brne	.+26     	; 0xc56 <main+0xb4>
     c3c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <checkSize>
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <checkSize>
					checkSize++;
     c46:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <checkSize>
     c4a:	84 30       	cpi	r24, 0x04	; 4
     c4c:	09 f0       	breq	.+2      	; 0xc50 <main+0xae>
					if (checkSize == 4) {
     c4e:	99 c0       	rjmp	.+306    	; 0xd82 <main+0x1e0>
     c50:	80 92 8c 02 	sts	0x028C, r8	; 0x80028c <g_PacketMode>
     c54:	96 c0       	rjmp	.+300    	; 0xd82 <main+0x1e0>
     c56:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <checkSize>
						g_PacketMode = 1;
     c5a:	93 c0       	rjmp	.+294    	; 0xd82 <main+0x1e0>
     c5c:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <checkSize>
					}
				}
				else {
					checkSize = 0;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	8e 0f       	add	r24, r30
				}
				break;
				
			case 1:

				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     c64:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <checkSize>
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	a0 91 7f 02 	lds	r26, 0x027F	; 0x80027f <g_BufReadCnt>
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	aa 5c       	subi	r26, 0xCA	; 202
     c72:	be 4f       	sbci	r27, 0xFE	; 254
     c74:	8c 91       	ld	r24, X
     c76:	ee 5a       	subi	r30, 0xAE	; 174
     c78:	fd 4f       	sbci	r31, 0xFD	; 253
     c7a:	80 83       	st	Z, r24
     c7c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <checkSize>
     c80:	88 30       	cpi	r24, 0x08	; 8
     c82:	09 f0       	breq	.+2      	; 0xc86 <main+0xe4>
				
				if (checkSize == 8) {
     c84:	7e c0       	rjmp	.+252    	; 0xd82 <main+0x1e0>
     c86:	f6 01       	movw	r30, r12
     c88:	95 81       	ldd	r25, Z+5	; 0x05
     c8a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_ID>
					if(g_PacketBuffer.data.id == g_ID){
     c8e:	98 13       	cpse	r25, r24
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <main+0xf6>
     c92:	70 92 8c 02 	sts	0x028C, r7	; 0x80028c <g_PacketMode>
     c96:	75 c0       	rjmp	.+234    	; 0xd82 <main+0x1e0>
     c98:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <g_PacketMode>

						g_PacketMode = 2;
     c9c:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <checkSize>
					}
					else{
						g_PacketMode = 0;
     ca0:	70 c0       	rjmp	.+224    	; 0xd82 <main+0x1e0>
     ca2:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <checkSize>
						checkSize = 0;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	8e 0f       	add	r24, r30

				break;
			
			case 2:
				
				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     caa:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <checkSize>
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	a0 91 7f 02 	lds	r26, 0x027F	; 0x80027f <g_BufReadCnt>
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	aa 5c       	subi	r26, 0xCA	; 202
     cb8:	be 4f       	sbci	r27, 0xFE	; 254
     cba:	8c 91       	ld	r24, X
     cbc:	ee 5a       	subi	r30, 0xAE	; 174
     cbe:	fd 4f       	sbci	r31, 0xFD	; 253
     cc0:	80 83       	st	Z, r24
     cc2:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <g_BufReadCnt>
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	ea 5c       	subi	r30, 0xCA	; 202
				check += g_buf[g_BufReadCnt];
     cca:	fe 4f       	sbci	r31, 0xFE	; 254
     ccc:	80 81       	ld	r24, Z
     cce:	b8 0e       	add	r11, r24
     cd0:	f6 01       	movw	r30, r12
     cd2:	94 81       	ldd	r25, Z+4	; 0x04
     cd4:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <checkSize>
				
				if (checkSize == g_PacketBuffer.data.size) {
     cd8:	98 13       	cpse	r25, r24
     cda:	44 c0       	rjmp	.+136    	; 0xd64 <main+0x1c2>
     cdc:	87 81       	ldd	r24, Z+7	; 0x07
     cde:	b8 12       	cpse	r11, r24
     ce0:	3b c0       	rjmp	.+118    	; 0xd58 <main+0x1b6>
     ce2:	86 81       	ldd	r24, Z+6	; 0x06

					if(check == g_PacketBuffer.data.check){
     ce4:	82 30       	cpi	r24, 0x02	; 2
     ce6:	c1 f5       	brne	.+112    	; 0xd58 <main+0x1b6>

						switch(g_PacketBuffer.data.mode){
     ce8:	60 85       	ldd	r22, Z+8	; 0x08
     cea:	71 85       	ldd	r23, Z+9	; 0x09
     cec:	82 85       	ldd	r24, Z+10	; 0x0a

							case 2:
							g_Pdes = g_PacketBuffer.data.pos / 1000.;
     cee:	93 85       	ldd	r25, Z+11	; 0x0b
     cf0:	14 d2       	rcall	.+1064   	; 0x111a <__floatsisf>
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	4a e7       	ldi	r20, 0x7A	; 122
     cf8:	54 e4       	ldi	r21, 0x44	; 68
     cfa:	74 d1       	rcall	.+744    	; 0xfe4 <__divsf3>
     cfc:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <g_Pdes>
     d00:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <g_Pdes+0x1>
     d04:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_Pdes+0x2>
     d08:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_Pdes+0x3>
     d0c:	f6 01       	movw	r30, r12
     d0e:	64 85       	ldd	r22, Z+12	; 0x0c
     d10:	75 85       	ldd	r23, Z+13	; 0x0d
							g_Vlimit = g_PacketBuffer.data.velo / 1000.;
     d12:	86 85       	ldd	r24, Z+14	; 0x0e
     d14:	97 85       	ldd	r25, Z+15	; 0x0f
     d16:	01 d2       	rcall	.+1026   	; 0x111a <__floatsisf>
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	4a e7       	ldi	r20, 0x7A	; 122
     d1e:	54 e4       	ldi	r21, 0x44	; 68
     d20:	61 d1       	rcall	.+706    	; 0xfe4 <__divsf3>
     d22:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <g_Vlimit>
     d26:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <g_Vlimit+0x1>
     d2a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <g_Vlimit+0x2>
     d2e:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <g_Vlimit+0x3>
     d32:	f6 01       	movw	r30, r12
     d34:	60 89       	ldd	r22, Z+16	; 0x10
     d36:	71 89       	ldd	r23, Z+17	; 0x11
							g_Climit = g_PacketBuffer.data.cur / 1000.;
     d38:	82 89       	ldd	r24, Z+18	; 0x12
     d3a:	93 89       	ldd	r25, Z+19	; 0x13
     d3c:	ee d1       	rcall	.+988    	; 0x111a <__floatsisf>
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	4a e7       	ldi	r20, 0x7A	; 122
     d44:	54 e4       	ldi	r21, 0x44	; 68
     d46:	4e d1       	rcall	.+668    	; 0xfe4 <__divsf3>
     d48:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <g_Climit>
     d4c:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <g_Climit+0x1>
     d50:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_Climit+0x2>
     d54:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <g_Climit+0x3>
     d58:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <g_PacketMode>
     d5c:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <checkSize>
     d60:	b1 2c       	mov	r11, r1
							break;
							}
					}
					
					check = 0;
					g_PacketMode = 0;
     d62:	0f c0       	rjmp	.+30     	; 0xd82 <main+0x1e0>
     d64:	f6 01       	movw	r30, r12
					checkSize = 0;
     d66:	94 81       	ldd	r25, Z+4	; 0x04
     d68:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <checkSize>
							g_Climit = g_PacketBuffer.data.cur / 1000.;
							break;
							}
					}
					
					check = 0;
     d6c:	98 17       	cp	r25, r24
					g_PacketMode = 0;
					checkSize = 0;
				}
				else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)) {
     d6e:	20 f0       	brcs	.+8      	; 0xd78 <main+0x1d6>
     d70:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <checkSize>
     d74:	85 31       	cpi	r24, 0x15	; 21
     d76:	28 f0       	brcs	.+10     	; 0xd82 <main+0x1e0>
     d78:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <g_PacketMode>
     d7c:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <checkSize>
     d80:	b1 2c       	mov	r11, r1
					//TransUart0('f');
					check = 0;
					g_PacketMode = 0;
     d82:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <g_BufReadCnt>
					checkSize = 0;
     d86:	8f 5f       	subi	r24, 0xFF	; 255
     d88:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_BufReadCnt>

	unsigned char check = 0;
	
    while (1) {
		 //패킷 통신 데이터 해석 코드
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
     d8c:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <g_BufReadCnt>
     d90:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <g_BufWriteCnt>
     d94:	98 13       	cpse	r25, r24
     d96:	42 cf       	rjmp	.-380    	; 0xc1c <main+0x7a>
     d98:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_SendFlag>
     d9c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_SendFlag+0x1>
     da0:	44 97       	sbiw	r24, 0x14	; 20
			}
		}


		
		if(g_SendFlag > 19){
     da2:	a4 f3       	brlt	.-24     	; 0xd8c <main+0x1ea>
     da4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <g_SendFlag+0x1>
     da8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <g_SendFlag>
     dac:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_ID>
			g_SendFlag = 0;
     db0:	8e 83       	std	Y+6, r24	; 0x06
     db2:	9d 82       	std	Y+5, r9	; 0x05
     db4:	af 82       	std	Y+7, r10	; 0x07
				
			packet.data.id = g_ID;
     db6:	18 86       	std	Y+8, r1	; 0x08
     db8:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <g_Pcur>
			packet.data.size = sizeof(Packet_data_t);
			packet.data.mode = 3;
			packet.data.check = 0;
     dbc:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <g_Pcur+0x1>
			
			packet.data.pos = g_Pcur * 1000; 
     dc0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <g_Pcur+0x2>
     dc4:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <g_Pcur+0x3>
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	4a e7       	ldi	r20, 0x7A	; 122
     dce:	54 e4       	ldi	r21, 0x44	; 68
     dd0:	58 d2       	rcall	.+1200   	; 0x1282 <__mulsf3>
     dd2:	70 d1       	rcall	.+736    	; 0x10b4 <__fixsfsi>
     dd4:	69 87       	std	Y+9, r22	; 0x09
     dd6:	7a 87       	std	Y+10, r23	; 0x0a
     dd8:	8b 87       	std	Y+11, r24	; 0x0b
     dda:	9c 87       	std	Y+12, r25	; 0x0c
     ddc:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <g_Vcur>
     de0:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <g_Vcur+0x1>
			packet.data.velo = g_Vcur * 1000;
     de4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_Vcur+0x2>
     de8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <g_Vcur+0x3>
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	4a e7       	ldi	r20, 0x7A	; 122
     df2:	54 e4       	ldi	r21, 0x44	; 68
     df4:	46 d2       	rcall	.+1164   	; 0x1282 <__mulsf3>
     df6:	5e d1       	rcall	.+700    	; 0x10b4 <__fixsfsi>
     df8:	6d 87       	std	Y+13, r22	; 0x0d
     dfa:	7e 87       	std	Y+14, r23	; 0x0e
     dfc:	8f 87       	std	Y+15, r24	; 0x0f
     dfe:	98 8b       	std	Y+16, r25	; 0x10
     e00:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <g_Ccur>
     e04:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <g_Ccur+0x1>
			packet.data.cur = g_Ccur * 1000;
     e08:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <g_Ccur+0x2>
     e0c:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <g_Ccur+0x3>
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	4a e7       	ldi	r20, 0x7A	; 122
     e16:	54 e4       	ldi	r21, 0x44	; 68
     e18:	34 d2       	rcall	.+1128   	; 0x1282 <__mulsf3>
     e1a:	4c d1       	rcall	.+664    	; 0x10b4 <__fixsfsi>
     e1c:	69 8b       	std	Y+17, r22	; 0x11
     e1e:	7a 8b       	std	Y+18, r23	; 0x12
     e20:	8b 8b       	std	Y+19, r24	; 0x13
     e22:	9c 8b       	std	Y+20, r25	; 0x14
     e24:	fe 01       	movw	r30, r28
     e26:	39 96       	adiw	r30, 0x09	; 9
     e28:	81 91       	ld	r24, Z+
     e2a:	98 85       	ldd	r25, Y+8	; 0x08
     e2c:	89 0f       	add	r24, r25
     e2e:	88 87       	std	Y+8, r24	; 0x08
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];
     e30:	ee 15       	cp	r30, r14
     e32:	ff 05       	cpc	r31, r15
     e34:	c9 f7       	brne	.-14     	; 0xe28 <main+0x286>
     e36:	8e 01       	movw	r16, r28
			
			packet.data.pos = g_Pcur * 1000; 
			packet.data.velo = g_Vcur * 1000;
			packet.data.cur = g_Ccur * 1000;
			
			for (int i = 8; i < sizeof(Packet_t); i++)
     e38:	0f 5f       	subi	r16, 0xFF	; 255
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	f8 01       	movw	r30, r16
     e3e:	81 91       	ld	r24, Z+
     e40:	8f 01       	movw	r16, r30
     e42:	59 d0       	rcall	.+178    	; 0xef6 <TransUart0>
			packet.data.check += packet.buffer[i];
			
			for(int i=0; i<packet.data.size; i++){
				TransUart0(packet.buffer[i]);
     e44:	0e 15       	cp	r16, r14
     e46:	1f 05       	cpc	r17, r15
     e48:	c9 f7       	brne	.-14     	; 0xe3c <main+0x29a>
     e4a:	a0 cf       	rjmp	.-192    	; 0xd8c <main+0x1ea>

00000e4c <InitIO>:
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
			packet.data.cur = g_Ccur * 1000;
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];
			
			for(int i=0; i<packet.data.size; i++){
     e4e:	8a bb       	out	0x1a, r24	; 26
     e50:	84 bb       	out	0x14, r24	; 20
     e52:	88 e0       	ldi	r24, 0x08	; 8
     e54:	81 bb       	out	0x11, r24	; 17
	TransUart1( ((num%100000) / 10000) + 48);
	TransUart1( ((num%10000) / 1000) + 48);
	TransUart1( ((num%1000) / 100) + 48);
	TransUart1( ((num%100) / 10) + 48);
	TransUart1( num%10 + 48 );
}
     e56:	87 e6       	ldi	r24, 0x67	; 103
     e58:	87 bb       	out	0x17, r24	; 23
     e5a:	8a e1       	ldi	r24, 0x1A	; 26
     e5c:	82 b9       	out	0x02, r24	; 2
     e5e:	1b ba       	out	0x1b, r1	; 27
     e60:	87 e0       	ldi	r24, 0x07	; 7
     e62:	88 bb       	out	0x18, r24	; 24
     e64:	08 95       	ret

00000e66 <InitTimer0>:
     e66:	84 e0       	ldi	r24, 0x04	; 4
     e68:	83 bf       	out	0x33, r24	; 51
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	87 bf       	out	0x37, r24	; 55
     e6e:	08 95       	ret

00000e70 <InitTimer1>:
     e70:	82 ee       	ldi	r24, 0xE2	; 226
     e72:	8f bd       	out	0x2f, r24	; 47
     e74:	81 e1       	ldi	r24, 0x11	; 17
     e76:	8e bd       	out	0x2e, r24	; 46
     e78:	8f e8       	ldi	r24, 0x8F	; 143
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	97 bd       	out	0x27, r25	; 39
     e7e:	86 bd       	out	0x26, r24	; 38
     e80:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     e84:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     e88:	1b bc       	out	0x2b, r1	; 43
     e8a:	1a bc       	out	0x2a, r1	; 42
     e8c:	19 bc       	out	0x29, r1	; 41
     e8e:	18 bc       	out	0x28, r1	; 40
     e90:	1d bc       	out	0x2d, r1	; 45
     e92:	1c bc       	out	0x2c, r1	; 44
     e94:	08 95       	ret

00000e96 <InitTimer3>:
     e96:	82 eb       	ldi	r24, 0xB2	; 178
     e98:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     e9c:	81 e1       	ldi	r24, 0x11	; 17
     e9e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     ea2:	8f e8       	ldi	r24, 0x8F	; 143
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     eaa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     eae:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     eb2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     eb6:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     eba:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     ebe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ec2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ec6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     eca:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ece:	08 95       	ret

00000ed0 <InitADC>:
     ed0:	80 e4       	ldi	r24, 0x40	; 64
     ed2:	87 b9       	out	0x07, r24	; 7
     ed4:	86 e8       	ldi	r24, 0x86	; 134
     ed6:	86 b9       	out	0x06, r24	; 6
     ed8:	08 95       	ret

00000eda <InitUart0>:
     eda:	1b b8       	out	0x0b, r1	; 11
     edc:	88 e9       	ldi	r24, 0x98	; 152
     ede:	8a b9       	out	0x0a, r24	; 10
     ee0:	86 e0       	ldi	r24, 0x06	; 6
     ee2:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     ee6:	87 e6       	ldi	r24, 0x67	; 103
     ee8:	89 b9       	out	0x09, r24	; 9
     eea:	08 95       	ret

00000eec <InitSPI>:
     eec:	80 e5       	ldi	r24, 0x50	; 80
     eee:	8d b9       	out	0x0d, r24	; 13
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	8e b9       	out	0x0e, r24	; 14
     ef4:	08 95       	ret

00000ef6 <TransUart0>:
     ef6:	5d 9b       	sbis	0x0b, 5	; 11
     ef8:	fe cf       	rjmp	.-4      	; 0xef6 <TransUart0>
     efa:	8c b9       	out	0x0c, r24	; 12
     efc:	08 95       	ret

00000efe <SPI_MasterSend>:
// Input : data
// Output : None
//////////////////////////////////////////////////////////////////
void SPI_MasterSend(unsigned char data){
	
	SPDR = data;
     efe:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80));
     f00:	77 9b       	sbis	0x0e, 7	; 14
     f02:	fe cf       	rjmp	.-4      	; 0xf00 <SPI_MasterSend+0x2>
	data = SPDR;
     f04:	8f b1       	in	r24, 0x0f	; 15
     f06:	08 95       	ret

00000f08 <SPI_MasterRecv>:
// Input : None
// Output : data
//////////////////////////////////////////////////////////////////
unsigned char SPI_MasterRecv(void)
{
	SPDR = 0x00;
     f08:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80));
     f0a:	77 9b       	sbis	0x0e, 7	; 14
     f0c:	fe cf       	rjmp	.-4      	; 0xf0a <SPI_MasterRecv+0x2>
	return SPDR;
     f0e:	8f b1       	in	r24, 0x0f	; 15
     f10:	08 95       	ret

00000f12 <__subsf3>:
     f12:	50 58       	subi	r21, 0x80	; 128

00000f14 <__addsf3>:
     f14:	bb 27       	eor	r27, r27
     f16:	aa 27       	eor	r26, r26
     f18:	0e d0       	rcall	.+28     	; 0xf36 <__addsf3x>
     f1a:	75 c1       	rjmp	.+746    	; 0x1206 <__fp_round>
     f1c:	66 d1       	rcall	.+716    	; 0x11ea <__fp_pscA>
     f1e:	30 f0       	brcs	.+12     	; 0xf2c <__addsf3+0x18>
     f20:	6b d1       	rcall	.+726    	; 0x11f8 <__fp_pscB>
     f22:	20 f0       	brcs	.+8      	; 0xf2c <__addsf3+0x18>
     f24:	31 f4       	brne	.+12     	; 0xf32 <__addsf3+0x1e>
     f26:	9f 3f       	cpi	r25, 0xFF	; 255
     f28:	11 f4       	brne	.+4      	; 0xf2e <__addsf3+0x1a>
     f2a:	1e f4       	brtc	.+6      	; 0xf32 <__addsf3+0x1e>
     f2c:	5b c1       	rjmp	.+694    	; 0x11e4 <__fp_nan>
     f2e:	0e f4       	brtc	.+2      	; 0xf32 <__addsf3+0x1e>
     f30:	e0 95       	com	r30
     f32:	e7 fb       	bst	r30, 7
     f34:	51 c1       	rjmp	.+674    	; 0x11d8 <__fp_inf>

00000f36 <__addsf3x>:
     f36:	e9 2f       	mov	r30, r25
     f38:	77 d1       	rcall	.+750    	; 0x1228 <__fp_split3>
     f3a:	80 f3       	brcs	.-32     	; 0xf1c <__addsf3+0x8>
     f3c:	ba 17       	cp	r27, r26
     f3e:	62 07       	cpc	r22, r18
     f40:	73 07       	cpc	r23, r19
     f42:	84 07       	cpc	r24, r20
     f44:	95 07       	cpc	r25, r21
     f46:	18 f0       	brcs	.+6      	; 0xf4e <__addsf3x+0x18>
     f48:	71 f4       	brne	.+28     	; 0xf66 <__addsf3x+0x30>
     f4a:	9e f5       	brtc	.+102    	; 0xfb2 <__addsf3x+0x7c>
     f4c:	8f c1       	rjmp	.+798    	; 0x126c <__fp_zero>
     f4e:	0e f4       	brtc	.+2      	; 0xf52 <__addsf3x+0x1c>
     f50:	e0 95       	com	r30
     f52:	0b 2e       	mov	r0, r27
     f54:	ba 2f       	mov	r27, r26
     f56:	a0 2d       	mov	r26, r0
     f58:	0b 01       	movw	r0, r22
     f5a:	b9 01       	movw	r22, r18
     f5c:	90 01       	movw	r18, r0
     f5e:	0c 01       	movw	r0, r24
     f60:	ca 01       	movw	r24, r20
     f62:	a0 01       	movw	r20, r0
     f64:	11 24       	eor	r1, r1
     f66:	ff 27       	eor	r31, r31
     f68:	59 1b       	sub	r21, r25
     f6a:	99 f0       	breq	.+38     	; 0xf92 <__addsf3x+0x5c>
     f6c:	59 3f       	cpi	r21, 0xF9	; 249
     f6e:	50 f4       	brcc	.+20     	; 0xf84 <__addsf3x+0x4e>
     f70:	50 3e       	cpi	r21, 0xE0	; 224
     f72:	68 f1       	brcs	.+90     	; 0xfce <__addsf3x+0x98>
     f74:	1a 16       	cp	r1, r26
     f76:	f0 40       	sbci	r31, 0x00	; 0
     f78:	a2 2f       	mov	r26, r18
     f7a:	23 2f       	mov	r18, r19
     f7c:	34 2f       	mov	r19, r20
     f7e:	44 27       	eor	r20, r20
     f80:	58 5f       	subi	r21, 0xF8	; 248
     f82:	f3 cf       	rjmp	.-26     	; 0xf6a <__addsf3x+0x34>
     f84:	46 95       	lsr	r20
     f86:	37 95       	ror	r19
     f88:	27 95       	ror	r18
     f8a:	a7 95       	ror	r26
     f8c:	f0 40       	sbci	r31, 0x00	; 0
     f8e:	53 95       	inc	r21
     f90:	c9 f7       	brne	.-14     	; 0xf84 <__addsf3x+0x4e>
     f92:	7e f4       	brtc	.+30     	; 0xfb2 <__addsf3x+0x7c>
     f94:	1f 16       	cp	r1, r31
     f96:	ba 0b       	sbc	r27, r26
     f98:	62 0b       	sbc	r22, r18
     f9a:	73 0b       	sbc	r23, r19
     f9c:	84 0b       	sbc	r24, r20
     f9e:	ba f0       	brmi	.+46     	; 0xfce <__addsf3x+0x98>
     fa0:	91 50       	subi	r25, 0x01	; 1
     fa2:	a1 f0       	breq	.+40     	; 0xfcc <__addsf3x+0x96>
     fa4:	ff 0f       	add	r31, r31
     fa6:	bb 1f       	adc	r27, r27
     fa8:	66 1f       	adc	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	88 1f       	adc	r24, r24
     fae:	c2 f7       	brpl	.-16     	; 0xfa0 <__addsf3x+0x6a>
     fb0:	0e c0       	rjmp	.+28     	; 0xfce <__addsf3x+0x98>
     fb2:	ba 0f       	add	r27, r26
     fb4:	62 1f       	adc	r22, r18
     fb6:	73 1f       	adc	r23, r19
     fb8:	84 1f       	adc	r24, r20
     fba:	48 f4       	brcc	.+18     	; 0xfce <__addsf3x+0x98>
     fbc:	87 95       	ror	r24
     fbe:	77 95       	ror	r23
     fc0:	67 95       	ror	r22
     fc2:	b7 95       	ror	r27
     fc4:	f7 95       	ror	r31
     fc6:	9e 3f       	cpi	r25, 0xFE	; 254
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <__addsf3x+0x96>
     fca:	b3 cf       	rjmp	.-154    	; 0xf32 <__addsf3+0x1e>
     fcc:	93 95       	inc	r25
     fce:	88 0f       	add	r24, r24
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <__addsf3x+0x9e>
     fd2:	99 27       	eor	r25, r25
     fd4:	ee 0f       	add	r30, r30
     fd6:	97 95       	ror	r25
     fd8:	87 95       	ror	r24
     fda:	08 95       	ret

00000fdc <__cmpsf2>:
     fdc:	d9 d0       	rcall	.+434    	; 0x1190 <__fp_cmp>
     fde:	08 f4       	brcc	.+2      	; 0xfe2 <__cmpsf2+0x6>
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	08 95       	ret

00000fe4 <__divsf3>:
     fe4:	0c d0       	rcall	.+24     	; 0xffe <__divsf3x>
     fe6:	0f c1       	rjmp	.+542    	; 0x1206 <__fp_round>
     fe8:	07 d1       	rcall	.+526    	; 0x11f8 <__fp_pscB>
     fea:	40 f0       	brcs	.+16     	; 0xffc <__divsf3+0x18>
     fec:	fe d0       	rcall	.+508    	; 0x11ea <__fp_pscA>
     fee:	30 f0       	brcs	.+12     	; 0xffc <__divsf3+0x18>
     ff0:	21 f4       	brne	.+8      	; 0xffa <__divsf3+0x16>
     ff2:	5f 3f       	cpi	r21, 0xFF	; 255
     ff4:	19 f0       	breq	.+6      	; 0xffc <__divsf3+0x18>
     ff6:	f0 c0       	rjmp	.+480    	; 0x11d8 <__fp_inf>
     ff8:	51 11       	cpse	r21, r1
     ffa:	39 c1       	rjmp	.+626    	; 0x126e <__fp_szero>
     ffc:	f3 c0       	rjmp	.+486    	; 0x11e4 <__fp_nan>

00000ffe <__divsf3x>:
     ffe:	14 d1       	rcall	.+552    	; 0x1228 <__fp_split3>
    1000:	98 f3       	brcs	.-26     	; 0xfe8 <__divsf3+0x4>

00001002 <__divsf3_pse>:
    1002:	99 23       	and	r25, r25
    1004:	c9 f3       	breq	.-14     	; 0xff8 <__divsf3+0x14>
    1006:	55 23       	and	r21, r21
    1008:	b1 f3       	breq	.-20     	; 0xff6 <__divsf3+0x12>
    100a:	95 1b       	sub	r25, r21
    100c:	55 0b       	sbc	r21, r21
    100e:	bb 27       	eor	r27, r27
    1010:	aa 27       	eor	r26, r26
    1012:	62 17       	cp	r22, r18
    1014:	73 07       	cpc	r23, r19
    1016:	84 07       	cpc	r24, r20
    1018:	38 f0       	brcs	.+14     	; 0x1028 <__divsf3_pse+0x26>
    101a:	9f 5f       	subi	r25, 0xFF	; 255
    101c:	5f 4f       	sbci	r21, 0xFF	; 255
    101e:	22 0f       	add	r18, r18
    1020:	33 1f       	adc	r19, r19
    1022:	44 1f       	adc	r20, r20
    1024:	aa 1f       	adc	r26, r26
    1026:	a9 f3       	breq	.-22     	; 0x1012 <__divsf3_pse+0x10>
    1028:	33 d0       	rcall	.+102    	; 0x1090 <__divsf3_pse+0x8e>
    102a:	0e 2e       	mov	r0, r30
    102c:	3a f0       	brmi	.+14     	; 0x103c <__divsf3_pse+0x3a>
    102e:	e0 e8       	ldi	r30, 0x80	; 128
    1030:	30 d0       	rcall	.+96     	; 0x1092 <__divsf3_pse+0x90>
    1032:	91 50       	subi	r25, 0x01	; 1
    1034:	50 40       	sbci	r21, 0x00	; 0
    1036:	e6 95       	lsr	r30
    1038:	00 1c       	adc	r0, r0
    103a:	ca f7       	brpl	.-14     	; 0x102e <__divsf3_pse+0x2c>
    103c:	29 d0       	rcall	.+82     	; 0x1090 <__divsf3_pse+0x8e>
    103e:	fe 2f       	mov	r31, r30
    1040:	27 d0       	rcall	.+78     	; 0x1090 <__divsf3_pse+0x8e>
    1042:	66 0f       	add	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	88 1f       	adc	r24, r24
    1048:	bb 1f       	adc	r27, r27
    104a:	26 17       	cp	r18, r22
    104c:	37 07       	cpc	r19, r23
    104e:	48 07       	cpc	r20, r24
    1050:	ab 07       	cpc	r26, r27
    1052:	b0 e8       	ldi	r27, 0x80	; 128
    1054:	09 f0       	breq	.+2      	; 0x1058 <__divsf3_pse+0x56>
    1056:	bb 0b       	sbc	r27, r27
    1058:	80 2d       	mov	r24, r0
    105a:	bf 01       	movw	r22, r30
    105c:	ff 27       	eor	r31, r31
    105e:	93 58       	subi	r25, 0x83	; 131
    1060:	5f 4f       	sbci	r21, 0xFF	; 255
    1062:	2a f0       	brmi	.+10     	; 0x106e <__divsf3_pse+0x6c>
    1064:	9e 3f       	cpi	r25, 0xFE	; 254
    1066:	51 05       	cpc	r21, r1
    1068:	68 f0       	brcs	.+26     	; 0x1084 <__divsf3_pse+0x82>
    106a:	b6 c0       	rjmp	.+364    	; 0x11d8 <__fp_inf>
    106c:	00 c1       	rjmp	.+512    	; 0x126e <__fp_szero>
    106e:	5f 3f       	cpi	r21, 0xFF	; 255
    1070:	ec f3       	brlt	.-6      	; 0x106c <__divsf3_pse+0x6a>
    1072:	98 3e       	cpi	r25, 0xE8	; 232
    1074:	dc f3       	brlt	.-10     	; 0x106c <__divsf3_pse+0x6a>
    1076:	86 95       	lsr	r24
    1078:	77 95       	ror	r23
    107a:	67 95       	ror	r22
    107c:	b7 95       	ror	r27
    107e:	f7 95       	ror	r31
    1080:	9f 5f       	subi	r25, 0xFF	; 255
    1082:	c9 f7       	brne	.-14     	; 0x1076 <__divsf3_pse+0x74>
    1084:	88 0f       	add	r24, r24
    1086:	91 1d       	adc	r25, r1
    1088:	96 95       	lsr	r25
    108a:	87 95       	ror	r24
    108c:	97 f9       	bld	r25, 7
    108e:	08 95       	ret
    1090:	e1 e0       	ldi	r30, 0x01	; 1
    1092:	66 0f       	add	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	88 1f       	adc	r24, r24
    1098:	bb 1f       	adc	r27, r27
    109a:	62 17       	cp	r22, r18
    109c:	73 07       	cpc	r23, r19
    109e:	84 07       	cpc	r24, r20
    10a0:	ba 07       	cpc	r27, r26
    10a2:	20 f0       	brcs	.+8      	; 0x10ac <__divsf3_pse+0xaa>
    10a4:	62 1b       	sub	r22, r18
    10a6:	73 0b       	sbc	r23, r19
    10a8:	84 0b       	sbc	r24, r20
    10aa:	ba 0b       	sbc	r27, r26
    10ac:	ee 1f       	adc	r30, r30
    10ae:	88 f7       	brcc	.-30     	; 0x1092 <__divsf3_pse+0x90>
    10b0:	e0 95       	com	r30
    10b2:	08 95       	ret

000010b4 <__fixsfsi>:
    10b4:	04 d0       	rcall	.+8      	; 0x10be <__fixunssfsi>
    10b6:	68 94       	set
    10b8:	b1 11       	cpse	r27, r1
    10ba:	d9 c0       	rjmp	.+434    	; 0x126e <__fp_szero>
    10bc:	08 95       	ret

000010be <__fixunssfsi>:
    10be:	bc d0       	rcall	.+376    	; 0x1238 <__fp_splitA>
    10c0:	88 f0       	brcs	.+34     	; 0x10e4 <__fixunssfsi+0x26>
    10c2:	9f 57       	subi	r25, 0x7F	; 127
    10c4:	90 f0       	brcs	.+36     	; 0x10ea <__fixunssfsi+0x2c>
    10c6:	b9 2f       	mov	r27, r25
    10c8:	99 27       	eor	r25, r25
    10ca:	b7 51       	subi	r27, 0x17	; 23
    10cc:	a0 f0       	brcs	.+40     	; 0x10f6 <__fixunssfsi+0x38>
    10ce:	d1 f0       	breq	.+52     	; 0x1104 <__stack+0x5>
    10d0:	66 0f       	add	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	88 1f       	adc	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	1a f0       	brmi	.+6      	; 0x10e0 <__fixunssfsi+0x22>
    10da:	ba 95       	dec	r27
    10dc:	c9 f7       	brne	.-14     	; 0x10d0 <__fixunssfsi+0x12>
    10de:	12 c0       	rjmp	.+36     	; 0x1104 <__stack+0x5>
    10e0:	b1 30       	cpi	r27, 0x01	; 1
    10e2:	81 f0       	breq	.+32     	; 0x1104 <__stack+0x5>
    10e4:	c3 d0       	rcall	.+390    	; 0x126c <__fp_zero>
    10e6:	b1 e0       	ldi	r27, 0x01	; 1
    10e8:	08 95       	ret
    10ea:	c0 c0       	rjmp	.+384    	; 0x126c <__fp_zero>
    10ec:	67 2f       	mov	r22, r23
    10ee:	78 2f       	mov	r23, r24
    10f0:	88 27       	eor	r24, r24
    10f2:	b8 5f       	subi	r27, 0xF8	; 248
    10f4:	39 f0       	breq	.+14     	; 0x1104 <__stack+0x5>
    10f6:	b9 3f       	cpi	r27, 0xF9	; 249
    10f8:	cc f3       	brlt	.-14     	; 0x10ec <__fixunssfsi+0x2e>
    10fa:	86 95       	lsr	r24
    10fc:	77 95       	ror	r23
    10fe:	67 95       	ror	r22
    1100:	b3 95       	inc	r27
    1102:	d9 f7       	brne	.-10     	; 0x10fa <__fixunssfsi+0x3c>
    1104:	3e f4       	brtc	.+14     	; 0x1114 <__stack+0x15>
    1106:	90 95       	com	r25
    1108:	80 95       	com	r24
    110a:	70 95       	com	r23
    110c:	61 95       	neg	r22
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	8f 4f       	sbci	r24, 0xFF	; 255
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	08 95       	ret

00001116 <__floatunsisf>:
    1116:	e8 94       	clt
    1118:	09 c0       	rjmp	.+18     	; 0x112c <__floatsisf+0x12>

0000111a <__floatsisf>:
    111a:	97 fb       	bst	r25, 7
    111c:	3e f4       	brtc	.+14     	; 0x112c <__floatsisf+0x12>
    111e:	90 95       	com	r25
    1120:	80 95       	com	r24
    1122:	70 95       	com	r23
    1124:	61 95       	neg	r22
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	8f 4f       	sbci	r24, 0xFF	; 255
    112a:	9f 4f       	sbci	r25, 0xFF	; 255
    112c:	99 23       	and	r25, r25
    112e:	a9 f0       	breq	.+42     	; 0x115a <__floatsisf+0x40>
    1130:	f9 2f       	mov	r31, r25
    1132:	96 e9       	ldi	r25, 0x96	; 150
    1134:	bb 27       	eor	r27, r27
    1136:	93 95       	inc	r25
    1138:	f6 95       	lsr	r31
    113a:	87 95       	ror	r24
    113c:	77 95       	ror	r23
    113e:	67 95       	ror	r22
    1140:	b7 95       	ror	r27
    1142:	f1 11       	cpse	r31, r1
    1144:	f8 cf       	rjmp	.-16     	; 0x1136 <__floatsisf+0x1c>
    1146:	fa f4       	brpl	.+62     	; 0x1186 <__floatsisf+0x6c>
    1148:	bb 0f       	add	r27, r27
    114a:	11 f4       	brne	.+4      	; 0x1150 <__floatsisf+0x36>
    114c:	60 ff       	sbrs	r22, 0
    114e:	1b c0       	rjmp	.+54     	; 0x1186 <__floatsisf+0x6c>
    1150:	6f 5f       	subi	r22, 0xFF	; 255
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	8f 4f       	sbci	r24, 0xFF	; 255
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	16 c0       	rjmp	.+44     	; 0x1186 <__floatsisf+0x6c>
    115a:	88 23       	and	r24, r24
    115c:	11 f0       	breq	.+4      	; 0x1162 <__floatsisf+0x48>
    115e:	96 e9       	ldi	r25, 0x96	; 150
    1160:	11 c0       	rjmp	.+34     	; 0x1184 <__floatsisf+0x6a>
    1162:	77 23       	and	r23, r23
    1164:	21 f0       	breq	.+8      	; 0x116e <__floatsisf+0x54>
    1166:	9e e8       	ldi	r25, 0x8E	; 142
    1168:	87 2f       	mov	r24, r23
    116a:	76 2f       	mov	r23, r22
    116c:	05 c0       	rjmp	.+10     	; 0x1178 <__floatsisf+0x5e>
    116e:	66 23       	and	r22, r22
    1170:	71 f0       	breq	.+28     	; 0x118e <__floatsisf+0x74>
    1172:	96 e8       	ldi	r25, 0x86	; 134
    1174:	86 2f       	mov	r24, r22
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	2a f0       	brmi	.+10     	; 0x1186 <__floatsisf+0x6c>
    117c:	9a 95       	dec	r25
    117e:	66 0f       	add	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	da f7       	brpl	.-10     	; 0x117c <__floatsisf+0x62>
    1186:	88 0f       	add	r24, r24
    1188:	96 95       	lsr	r25
    118a:	87 95       	ror	r24
    118c:	97 f9       	bld	r25, 7
    118e:	08 95       	ret

00001190 <__fp_cmp>:
    1190:	99 0f       	add	r25, r25
    1192:	00 08       	sbc	r0, r0
    1194:	55 0f       	add	r21, r21
    1196:	aa 0b       	sbc	r26, r26
    1198:	e0 e8       	ldi	r30, 0x80	; 128
    119a:	fe ef       	ldi	r31, 0xFE	; 254
    119c:	16 16       	cp	r1, r22
    119e:	17 06       	cpc	r1, r23
    11a0:	e8 07       	cpc	r30, r24
    11a2:	f9 07       	cpc	r31, r25
    11a4:	c0 f0       	brcs	.+48     	; 0x11d6 <__fp_cmp+0x46>
    11a6:	12 16       	cp	r1, r18
    11a8:	13 06       	cpc	r1, r19
    11aa:	e4 07       	cpc	r30, r20
    11ac:	f5 07       	cpc	r31, r21
    11ae:	98 f0       	brcs	.+38     	; 0x11d6 <__fp_cmp+0x46>
    11b0:	62 1b       	sub	r22, r18
    11b2:	73 0b       	sbc	r23, r19
    11b4:	84 0b       	sbc	r24, r20
    11b6:	95 0b       	sbc	r25, r21
    11b8:	39 f4       	brne	.+14     	; 0x11c8 <__fp_cmp+0x38>
    11ba:	0a 26       	eor	r0, r26
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <__fp_cmp+0x46>
    11be:	23 2b       	or	r18, r19
    11c0:	24 2b       	or	r18, r20
    11c2:	25 2b       	or	r18, r21
    11c4:	21 f4       	brne	.+8      	; 0x11ce <__fp_cmp+0x3e>
    11c6:	08 95       	ret
    11c8:	0a 26       	eor	r0, r26
    11ca:	09 f4       	brne	.+2      	; 0x11ce <__fp_cmp+0x3e>
    11cc:	a1 40       	sbci	r26, 0x01	; 1
    11ce:	a6 95       	lsr	r26
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	81 1d       	adc	r24, r1
    11d4:	81 1d       	adc	r24, r1
    11d6:	08 95       	ret

000011d8 <__fp_inf>:
    11d8:	97 f9       	bld	r25, 7
    11da:	9f 67       	ori	r25, 0x7F	; 127
    11dc:	80 e8       	ldi	r24, 0x80	; 128
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	08 95       	ret

000011e4 <__fp_nan>:
    11e4:	9f ef       	ldi	r25, 0xFF	; 255
    11e6:	80 ec       	ldi	r24, 0xC0	; 192
    11e8:	08 95       	ret

000011ea <__fp_pscA>:
    11ea:	00 24       	eor	r0, r0
    11ec:	0a 94       	dec	r0
    11ee:	16 16       	cp	r1, r22
    11f0:	17 06       	cpc	r1, r23
    11f2:	18 06       	cpc	r1, r24
    11f4:	09 06       	cpc	r0, r25
    11f6:	08 95       	ret

000011f8 <__fp_pscB>:
    11f8:	00 24       	eor	r0, r0
    11fa:	0a 94       	dec	r0
    11fc:	12 16       	cp	r1, r18
    11fe:	13 06       	cpc	r1, r19
    1200:	14 06       	cpc	r1, r20
    1202:	05 06       	cpc	r0, r21
    1204:	08 95       	ret

00001206 <__fp_round>:
    1206:	09 2e       	mov	r0, r25
    1208:	03 94       	inc	r0
    120a:	00 0c       	add	r0, r0
    120c:	11 f4       	brne	.+4      	; 0x1212 <__fp_round+0xc>
    120e:	88 23       	and	r24, r24
    1210:	52 f0       	brmi	.+20     	; 0x1226 <__fp_round+0x20>
    1212:	bb 0f       	add	r27, r27
    1214:	40 f4       	brcc	.+16     	; 0x1226 <__fp_round+0x20>
    1216:	bf 2b       	or	r27, r31
    1218:	11 f4       	brne	.+4      	; 0x121e <__fp_round+0x18>
    121a:	60 ff       	sbrs	r22, 0
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <__fp_round+0x20>
    121e:	6f 5f       	subi	r22, 0xFF	; 255
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	8f 4f       	sbci	r24, 0xFF	; 255
    1224:	9f 4f       	sbci	r25, 0xFF	; 255
    1226:	08 95       	ret

00001228 <__fp_split3>:
    1228:	57 fd       	sbrc	r21, 7
    122a:	90 58       	subi	r25, 0x80	; 128
    122c:	44 0f       	add	r20, r20
    122e:	55 1f       	adc	r21, r21
    1230:	59 f0       	breq	.+22     	; 0x1248 <__fp_splitA+0x10>
    1232:	5f 3f       	cpi	r21, 0xFF	; 255
    1234:	71 f0       	breq	.+28     	; 0x1252 <__fp_splitA+0x1a>
    1236:	47 95       	ror	r20

00001238 <__fp_splitA>:
    1238:	88 0f       	add	r24, r24
    123a:	97 fb       	bst	r25, 7
    123c:	99 1f       	adc	r25, r25
    123e:	61 f0       	breq	.+24     	; 0x1258 <__fp_splitA+0x20>
    1240:	9f 3f       	cpi	r25, 0xFF	; 255
    1242:	79 f0       	breq	.+30     	; 0x1262 <__fp_splitA+0x2a>
    1244:	87 95       	ror	r24
    1246:	08 95       	ret
    1248:	12 16       	cp	r1, r18
    124a:	13 06       	cpc	r1, r19
    124c:	14 06       	cpc	r1, r20
    124e:	55 1f       	adc	r21, r21
    1250:	f2 cf       	rjmp	.-28     	; 0x1236 <__fp_split3+0xe>
    1252:	46 95       	lsr	r20
    1254:	f1 df       	rcall	.-30     	; 0x1238 <__fp_splitA>
    1256:	08 c0       	rjmp	.+16     	; 0x1268 <__fp_splitA+0x30>
    1258:	16 16       	cp	r1, r22
    125a:	17 06       	cpc	r1, r23
    125c:	18 06       	cpc	r1, r24
    125e:	99 1f       	adc	r25, r25
    1260:	f1 cf       	rjmp	.-30     	; 0x1244 <__fp_splitA+0xc>
    1262:	86 95       	lsr	r24
    1264:	71 05       	cpc	r23, r1
    1266:	61 05       	cpc	r22, r1
    1268:	08 94       	sec
    126a:	08 95       	ret

0000126c <__fp_zero>:
    126c:	e8 94       	clt

0000126e <__fp_szero>:
    126e:	bb 27       	eor	r27, r27
    1270:	66 27       	eor	r22, r22
    1272:	77 27       	eor	r23, r23
    1274:	cb 01       	movw	r24, r22
    1276:	97 f9       	bld	r25, 7
    1278:	08 95       	ret

0000127a <__gesf2>:
    127a:	8a df       	rcall	.-236    	; 0x1190 <__fp_cmp>
    127c:	08 f4       	brcc	.+2      	; 0x1280 <__gesf2+0x6>
    127e:	8f ef       	ldi	r24, 0xFF	; 255
    1280:	08 95       	ret

00001282 <__mulsf3>:
    1282:	0b d0       	rcall	.+22     	; 0x129a <__mulsf3x>
    1284:	c0 cf       	rjmp	.-128    	; 0x1206 <__fp_round>
    1286:	b1 df       	rcall	.-158    	; 0x11ea <__fp_pscA>
    1288:	28 f0       	brcs	.+10     	; 0x1294 <__mulsf3+0x12>
    128a:	b6 df       	rcall	.-148    	; 0x11f8 <__fp_pscB>
    128c:	18 f0       	brcs	.+6      	; 0x1294 <__mulsf3+0x12>
    128e:	95 23       	and	r25, r21
    1290:	09 f0       	breq	.+2      	; 0x1294 <__mulsf3+0x12>
    1292:	a2 cf       	rjmp	.-188    	; 0x11d8 <__fp_inf>
    1294:	a7 cf       	rjmp	.-178    	; 0x11e4 <__fp_nan>
    1296:	11 24       	eor	r1, r1
    1298:	ea cf       	rjmp	.-44     	; 0x126e <__fp_szero>

0000129a <__mulsf3x>:
    129a:	c6 df       	rcall	.-116    	; 0x1228 <__fp_split3>
    129c:	a0 f3       	brcs	.-24     	; 0x1286 <__mulsf3+0x4>

0000129e <__mulsf3_pse>:
    129e:	95 9f       	mul	r25, r21
    12a0:	d1 f3       	breq	.-12     	; 0x1296 <__mulsf3+0x14>
    12a2:	95 0f       	add	r25, r21
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	55 1f       	adc	r21, r21
    12a8:	62 9f       	mul	r22, r18
    12aa:	f0 01       	movw	r30, r0
    12ac:	72 9f       	mul	r23, r18
    12ae:	bb 27       	eor	r27, r27
    12b0:	f0 0d       	add	r31, r0
    12b2:	b1 1d       	adc	r27, r1
    12b4:	63 9f       	mul	r22, r19
    12b6:	aa 27       	eor	r26, r26
    12b8:	f0 0d       	add	r31, r0
    12ba:	b1 1d       	adc	r27, r1
    12bc:	aa 1f       	adc	r26, r26
    12be:	64 9f       	mul	r22, r20
    12c0:	66 27       	eor	r22, r22
    12c2:	b0 0d       	add	r27, r0
    12c4:	a1 1d       	adc	r26, r1
    12c6:	66 1f       	adc	r22, r22
    12c8:	82 9f       	mul	r24, r18
    12ca:	22 27       	eor	r18, r18
    12cc:	b0 0d       	add	r27, r0
    12ce:	a1 1d       	adc	r26, r1
    12d0:	62 1f       	adc	r22, r18
    12d2:	73 9f       	mul	r23, r19
    12d4:	b0 0d       	add	r27, r0
    12d6:	a1 1d       	adc	r26, r1
    12d8:	62 1f       	adc	r22, r18
    12da:	83 9f       	mul	r24, r19
    12dc:	a0 0d       	add	r26, r0
    12de:	61 1d       	adc	r22, r1
    12e0:	22 1f       	adc	r18, r18
    12e2:	74 9f       	mul	r23, r20
    12e4:	33 27       	eor	r19, r19
    12e6:	a0 0d       	add	r26, r0
    12e8:	61 1d       	adc	r22, r1
    12ea:	23 1f       	adc	r18, r19
    12ec:	84 9f       	mul	r24, r20
    12ee:	60 0d       	add	r22, r0
    12f0:	21 1d       	adc	r18, r1
    12f2:	82 2f       	mov	r24, r18
    12f4:	76 2f       	mov	r23, r22
    12f6:	6a 2f       	mov	r22, r26
    12f8:	11 24       	eor	r1, r1
    12fa:	9f 57       	subi	r25, 0x7F	; 127
    12fc:	50 40       	sbci	r21, 0x00	; 0
    12fe:	8a f0       	brmi	.+34     	; 0x1322 <__mulsf3_pse+0x84>
    1300:	e1 f0       	breq	.+56     	; 0x133a <__mulsf3_pse+0x9c>
    1302:	88 23       	and	r24, r24
    1304:	4a f0       	brmi	.+18     	; 0x1318 <__mulsf3_pse+0x7a>
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	bb 1f       	adc	r27, r27
    130c:	66 1f       	adc	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	88 1f       	adc	r24, r24
    1312:	91 50       	subi	r25, 0x01	; 1
    1314:	50 40       	sbci	r21, 0x00	; 0
    1316:	a9 f7       	brne	.-22     	; 0x1302 <__mulsf3_pse+0x64>
    1318:	9e 3f       	cpi	r25, 0xFE	; 254
    131a:	51 05       	cpc	r21, r1
    131c:	70 f0       	brcs	.+28     	; 0x133a <__mulsf3_pse+0x9c>
    131e:	5c cf       	rjmp	.-328    	; 0x11d8 <__fp_inf>
    1320:	a6 cf       	rjmp	.-180    	; 0x126e <__fp_szero>
    1322:	5f 3f       	cpi	r21, 0xFF	; 255
    1324:	ec f3       	brlt	.-6      	; 0x1320 <__mulsf3_pse+0x82>
    1326:	98 3e       	cpi	r25, 0xE8	; 232
    1328:	dc f3       	brlt	.-10     	; 0x1320 <__mulsf3_pse+0x82>
    132a:	86 95       	lsr	r24
    132c:	77 95       	ror	r23
    132e:	67 95       	ror	r22
    1330:	b7 95       	ror	r27
    1332:	f7 95       	ror	r31
    1334:	e7 95       	ror	r30
    1336:	9f 5f       	subi	r25, 0xFF	; 255
    1338:	c1 f7       	brne	.-16     	; 0x132a <__mulsf3_pse+0x8c>
    133a:	fe 2b       	or	r31, r30
    133c:	88 0f       	add	r24, r24
    133e:	91 1d       	adc	r25, r1
    1340:	96 95       	lsr	r25
    1342:	87 95       	ror	r24
    1344:	97 f9       	bld	r25, 7
    1346:	08 95       	ret

00001348 <_exit>:
    1348:	f8 94       	cli

0000134a <__stop_program>:
    134a:	ff cf       	rjmp	.-2      	; 0x134a <__stop_program>
